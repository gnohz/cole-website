#+STARTUP: content
#+options: author:nil
#+HUGO_BASE_DIR: /home/cole/Projects/cole-website/
#+hugo_level_offset: 0

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:END:
** TODO Python Script to Self-Destruct a GCP Virtual Machine
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: python-script-to-self-destruct-a-gcp-virtual-machine
:EXPORT_FILE_NAME: index
:END:
** TODO One Week Backpacking Trip                     :backpacking:@Stories:
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: one-week-backpacking-trip
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-12-26 Sat 18:55]--[2020-12-26 Sat 19:14] =>  0:19
CLOCK: [2020-12-26 Sat 17:43]--[2020-12-26 Sat 18:06] =>  0:23
CLOCK: [2020-12-26 Sat 16:41]--[2020-12-26 Sat 17:43] =>  1:02
:END:

*** Overview

This past summer I went on my first backpacking trip with two friends from highschool: Soren and Thomas. Soren and Thomas had backpacked before, but it was my first time. We hiked just about 100 miles over the course of 7 days!

The point of this post is to share what it might be like to go backpacking, and to provide entertainement value.

I haven't made it entertaining though. It's just a bullet point of things. You would never read a story that is a bullet point of events. You have to tie everything together. But I'm not ready for that right now.

*** Preparation

- I found my backpacking backpack on the side of the road left out for the trash. At first we weren't sure if it was going to cut it, but it worked out fine in the end (although it was heavy, creeked a lot, put a sharp pressure on hips, and fabric coming apart onto anything you put into the bag).
- We did one practice hike where we walked around cambridge with heavy water jugs in our backpacks.
- Thomas and I were vegetarian for the trip. We packed food which consisted primarily of freeze dried food, cliff bars, granola bars, and a jar of peanut butter.

*** Day 1

- Woke up at 7. Soren, Thomas, and I had done a practice camping on the roof of my house.
- We drove over to Soren's house where we had eggs for breakfast.
- Laurentiu is driving. Quite the character. I remember there was one close incident, but can't remember exactly what it was.
- Stop at a gas station on the way where I get this notebook. I'm so glad I did.
- Arrive at the trail head. We start off, ready to go.
- The parents hike along behind us for about 30 minutes, but they can't keep up. We are on our own!
- I wear a single shirt and pants for the 7 days.
- We reach the summit of the first ascent. It's the top of a ski lift. Beautiful. Change from pants to shorts.
- We see a trail resorer. We chat with him for a bit. He has a machette that he cuts down trail obstructions with. He notices our high morals and says that our morals are high because we haven't gotten wet yet.
- We go down from the ski lift. We see a pack of 6 girls. I didn't realize this was the first day. They were going to the opposite direction. One of them was wearing a McGill shirt so I said "wow I got to McGill too".
- After we pass them I start saying "We should've asked...", but then stop myself because I realize that I was trying to spread the "blame" when really it was entirely up to me to ask them a question. I wanted to ask them the details of their hike and how it was going.
- We summit a second mountain and stop for our first snack. Feels really good. We are eating at the top.
- We find our first stream and filter some water. While filtering water soren got out his ukelele and we started making up some songs together. Good times.
- We continue to the campsite. Set up the tent. The first freeze dried meals!
- An old man tells us to stay at this campsie instead of continuing forwards.
- We eat our meals by the river.
- Once it gets dark, we skinny dip in the river. It was very shallow so it was more of a pushup and spin move haha. First swim on the first day!
- We put our food in a nearby bear box.
- We sleep. Takes me a while to fall asleep, but pretty good.

*** Day 2

- Wake up and east some musli. It's a food very similar to overnight oats.
- We pack up the tent. I am trying to squeeze it against the trunk of a tree to speed up the flow of water. A branch punctures the water filter! It's the second morning lol.
- We find a stream and take a swim break. We were having a good time. Soren and Thomas had already dunked their heads, so it was my turn. I went for the big plunge, and when I resurface my glasses were missing! This was a relatively deep river, and the water was mostly clear, but not clear enough for us to find the glasses easily. And the river was flowing pretty strongly so we were afraid they could get pushed downstream! Soren guarded the downstream exit, while Thomas and I searched for the glasses. We found them! That would have been quite brutal if I had lost my glasses on the first day.
- We continue forward, eventually reaching a lake.
- Thomas goes swimming nakes. Some rangers pass by and we chat with them while thomas is hiding the lower half of his body in the water. It's difficult though because the lake is super shallow haha. Thomas didn't realize when he was first getting in. What a small world; turns out Thomas and Soren competed against the rangers in the MA sailing team league.
- We climb a mountain. Thomas calls with crystal. I get a selfie video on top of the mountain using a mini tripod I brought. Glad I brought it.
- We continue forward. We are ascending a mountain and keep thinking we are about to summit, but we never do.
- We finally get to the top and find a bunch of stacked rocks. There wasn't much of a view here. We rest for a bit and eat some snacks.
- We start descending. Soren thinks he saw the shelter so we all get our hopes up, but turns out it was just a really big rock.
- We are getting quite thirst and are out of water. Soren thinks he sees a river, but it's a mirage. Just some more rocks haha.
- We find a shelter with gross mosquito water, but it's kind of running. We filter some of it, make a wood fire and cook our meals. We lay down the tent and a tarp.
- We decide that there is still enough daylight that we want to continue forwards to make up for the below expected miles we hiked on the first day.
- We are all kind of delerious from the lack of water and are laughing somewhat hysterically at the smallest things. Thomas thinks we are jokin about resuming hiking, but we pack up and go.
- We find a marking on the ground that says "Pinta People". We discuss for a while what it could possible mean.
- We find a humongous river like the potomac and fill the big water filter with water but keep going instead of filtering because it is starting to get dark. This is the popped water filter, but we covered the hole with duct tape which works well enough. We want to find the next shelter before the sun sets. We alternate carrying the full water filter.
- We get lost for a bit trying to find the trail. After going the wrong way for some time, we find our way.
- We find a highway. Soren said that the shelter should be 1.5 miles past the highway so we are almost there!
- We keep hiking at a good pace for 2 hours but never find the shelter. We keep thinking that we must be almost there, and keeping mistaking objects for the shelter, but it never comes. We are unsure if we already past is or what the deal is.
- It is not getting very dark. Pitch black in fact. Thomas takes the lead with a headlight, and I am in back with a very bright bike light.
- We are all thirstier than ever before. We finally stop and consume the water we have been carrying in the water filter. We wanted to wait till camb, but it looks like that isn't going to happen.
- We drink some water and decide to stop for the night, thinking we passed the shelter (we hiked what must have been 5 miles).
- We find a side trail named "lake loop" and follow it in search of water. The next day we realize that the a lake used to be there, but that it is all dried up.
- The loop is longer than we thought. We aren't finding water and decide to stop and setup camp in the middle of a pitch black forest where we have no idea where we are. I think I may have been a bit grumpy.
- We find a small patch off the trail. Not quite flat or root free but good enough.
- We setup the tent. Everyone gets in. It smells horrible haha.
- I find a bit of wtare left in my camel pack and devour it secretly without sharing haha. It's enough water for me to fall asleep.
- Part of the reason we want to find a shelter so badly is that they have bear boxes where you can hide you food. In this case we leave our bags outside so that if a bear comes, at least it doesn't eat us, just our bags. We had really been manifesting a bear while walking in the dark, thinking any noise could be the bear coming.
- Sleepytime.

*** Day 3

- Wake up to Soren and Thomas.
- We pack up the tent. I take my first poo and use the emergen wipes. Very peaceful to poo in the forest.
- Hit the trail. 20 minutes later we fid the shelter. We were so close! Looking at the map we see that it was 5.5 miles from the highway after all, not 1.5...
- We stop to fill up on water. There is a very nice stream with a grey pipe that makes filtering the water very easy despite the shallowness of the stream.
- Cook some freeze dried food for breakfast. Tastes sooo good.
- I setup the tripod and take some videos. We are having a good time, but then the phone runs out of battery unfortunately.
- We hear moose noises, but think that they might be chain saws. They are coming closer! We were a bit afraid of what we would see come into our field of view.
- Thomas discovers that he missplaced the charging cable so no more phone. I'm bummed cause it's too bad not to be able to take photos.
- Everyone uses the mens. Mine is a bit messy. Flies are quick to attack. Thank God for emergen wipes lmao.
- Hit the rode. We summit a very pretty forest. We almost set up the hammock but don't.
- We find a gorge. It's beautiful.
- We all swim around to cool off and clean our selves. The first somewhat deep swimming location. Water is cold but feels amazing. There are some tourists there because the gorge is about 5 minutes from road access, so we keep our underwear on.
- We take lunch break #1. Spend some time patching up food blisters. They are quite bad.
- We keep hiking and cross a highway.
- We stop to fill up water at a stream. After the previous experiences, we do not want to be stuck without water again. We eat lunch break #2 at the stream. It is super relaxing.
- We continue onwards and arrive at the shelter. It is still pretty early in the day with sunlight.
- There is a beautiful privy and river.
- We setup a campfire and get food ready. Then we take bathe in the shallow river. My blisters are not fans. Walking around bearfoot. The water is freezing, but we dry off by the fire.
- We put our food in the lockable privy.
- Relax by the fire, play some ukelele, and go to bed.

*** Day 4

- Onwards. Everyone uses the privy.
- We hike up killington mountain. It's absolutely incredible. The tallest summit yet.
- There is a really cool shelter with bunk beds that we check out.
- We find another person. He thought we were bears or something.
- My joints are really starting to get angry with me. Doesn't like.
- Thomas thinks there might be a restaurant on top and begins manifesting it, desperate to find it, but Soren protests because it would cut into the daylight.
- Find a way to get higher by climbing a platform at the top. Kinda sketch, with a lot of floor boards missing, but we navigate our way up and enjoy the view.
- We cross a highway. There is a nice inn where backpackers can normally stop for a warm meal and bed, but it is closed because of Covid. We do take the opportunity to throw out whatever trash we had, and find a person with cute dogs which we pet.
- We keep hiking and find a nice overlook where we setup a hammock and relax. First round of popping blisters.
- We meet a stranger and chat with her a bit. Seems nice. She is on a mission to drive to hiking trails in 6 states or something like that.
- We find an official campsite. It has running water! What incredible technology!
- They have beach volley ball courts. We pretend to play without a ball. Good times.
- We keep going and find an awesome lake. Actually swimmable. It's a very hard choice to decide whether we stay here or keep going. Soren convinces us to make up the 2 remaining miles in the day tomorrow.
- We swim across the lake to an island in the middle. We are manifesting snapping turtles, but luckily none appear. There are some musical toads on the island in the middle. I lag behind because I'm afraid for my blisters, but I make it across. There are some kayakers. And a boy fishing. What a different life it would be to live out here.
- We come back and dry off while cooking food. We eat and then sleep. In the tent Thomas notices that some green stuff has invaded his blisters. He's not sure if they came from the lake or how they got there. He's a bit stressed about it, but Soren tells him not to worry about it (because Soren wants to go to sleep). We all go to bed.

*** Day 5

- We continue onwards. 
- Pass by some construction workers and try to ask them for some food, but either they completely ignored us, or couldn't hear us. It's chill though.
- We find a lake dock and walk out on it but it is somewhat falling apart and starts sinking as we walk out. Good times.
- We hike through an awesome forest with lots of big rocks.
- We stop at a river for a snack.
- There is a steep descent off a rock with a ladder to help you out. Soren just jumps down. No injury.
- I realize I lost my sleeping pad! I go back to look for it, but can't find it... Alas...
- We cross a bridge and find some old dudes chilling out by the river. They offer us some trail magic! Pretzels, doritos, lolly pops, and some other snacks. Very cool. They said that hikers were a lot less frequent because of Covid.
- I take the lead and go full speed up this mountain. I'm sweating like balls and exhausted but I just keep pushing. I keep telling myself 30 more steps. Soren and Thomas are barely keeping up and keep asking me to slow down, but I really just want to get to the top. The thing is that the top never comes haha. Eventually we stop for lunch before we reach the top, even though I protest, saying that we'll get a better view with which to eat lunch once we get to the top. It's chill though. Looking out at the forest is nice too.
- After lunch we keep going and we do reach the top. It's incredible! This is the highest summit so far I think.
- There is a shelter at the top of the mountain with a ladder to the roof. This shelter you can actually rent out, but it's open to backpackers when nobody is staying. It finally clicked why the trail to this shelter was so much more well maintained than the rest of the AT. I guess they don't want it to be too hard for the less intense people who rent out the shelter.
- We climb the ladder onto the roof. There are lots of bees on the top. We take some photos, and give each of our parents a call.
- Inside the cabin we find snickers, a pop tart, and pistachios! That snickers was the best snickers I've ever had.
- "leave behind nature valley". Not sure what this is.
- We go down the mountain and find the next shelter. Unfortunately we can't find any water nearby. Just a dried up river. We keep looking and I find some eventually a bit further downstream.
- We fill up all of our water packs and make dinner. Then we take it back to the shelter and eat there.
- We almost start a fire but decide to go to bed instead. We do a rotated sleeping pad strategy because I lost mine so we only have two left.

*** Day 6

- We pack up at shelter.
- I take a poo in the privy with the door open looking out onto all the trees.
- We hike for a while. We walk through a farm and find cows! They come right up to us and swarm us on all sides and really like being pet. They seem very interested in us. I was a bit afraid at first but in the end nobody got there fingers bit off. The cows had a bunch of flies in their eyes which was a bit unnerving, but it's cool.
- Eventually we continue fowards. We stop at a brooke and make a freeze dried lunch.
- Lots of breaks in the canopy today which makes everything much hotter than it already was.
- We roll down a hill.
- Giant mini forests where there are a bunch of plants that look like trees, but only go up to waste height. Really makes you feel like a giant.
- We stop in the forest and setup the hammock. Nice to relax. Soren and I finish off our peanut butter jars.
- I go in the hammock and it feels amazing.
- We keep going towards west hartford, the "big town" of the trip. We fantisize about what we'll find in the town.
- We find some trail magic sodas which gives us the sugar rush to climb up a mountain.
- We make it to the last road. This is the longest we walk on a road.
- We try to find a gas station or restaurant but fail to map food.
- We meet a friendly family who had just gone swimming and offers us some sodas. We ask if there is a gas station nearby but they say it is about 10 minutes by car which is wayy too far.
- We find a library with wifi, an ice cream store and a post office. The ice cream store is closed because of covid. The post office has the functionality of letting you ship yourself care packages as you hike along.
- We find a house with an "AT" sign on it. We check it out and find a friendly woman who gives us soda and says we can camp in her backyard for the night, and use her hose for tap water.
- We setup camp/tenta nd bring food and water to the river across the road. It's huge! By far the deepest.
- We find some locals bridge jumping. e join in. The water is very warm. Bridge jumping is awesome.
- After the bridge jumping we start making dinner. The locals find it funny that we are cooking food and spending the night at their local swimming location.
- They leave. We eat and washup with soap.
- Go to bed looking at the stars because we don't expect it to rain. Excited to see parents the next day.

*** Day 7

- The last day. We get a bit lost, but eventually find our way. We are mostly walking on roads. Then mine and Soren's mom find us with the car. The timing was perfect. They brought loads of fast food which was incredible.
- We drive into town and eat lunch at a restaurant. Human food!
- We visit Soren's chilhood home.
- The plan is to stay one more night so the parents can camp with us. I am going back home, but Soren and Thomas are continuing for another week more!
- We camp next to a nice lake that Thomas and Soren will be starting from the next day. We don't go swimming, but walk around the perimeter. It's great. We see this dude with a drone.
- We go to bed. The next day Soren and Thomas continue forwards, and the rest of us head home. The drive home was very relaxing.

*** Reflections
- I keep reading the notes and can't believe how early in the trip they occurred. A similar thing happens when I take courses at school. I wonder why this is.
- We kept manifesting a bear, but it was irrational of us to be so afraid. The fear made the backpacking more fun in some ways though.
- We were surprised at how little wild life we saw. Our footsteps must have been load enough to scare them all away.
- It's incredible what a new experience you can have in such a short period of time. This was just one week, but it was experience like none I've ever had.
- I regret not taking a photo of the before and after backpack.
- I regret not taking more photos.
- I'm really glad I journaled throughout the trip. There's no way I would have remembered even a quarter of these things otherwise.
- We got very lucky with the weather. No rain the whole time.
- We Very rarely see people. Maybe one person a day on average.

*** COMMENT Notes

- My hiking boots starts falling apart. I think they might be built for fashion, not actually hiking.
- Eventually I leveled up from emergen wipes to fresh leaves.
- At nighttime Soren would read siddartha to us when falling asleep. Sometimes he would even read it while hiking!
- My joints get quite angry with me by the end.
- I have a tendancy to almost jog downhill, trying not to waste the potential energy. Also I found that it was easier on the joints. But Thomas and Soren aren't fans because there's a higher risk of falling over. I think I almost fall over a couple of times, but I never do.

Why post this on the blog?
- to show other people that I backpack.
- to inspire other people to backpack.
- to entertain. Problem with this is I don't think my recounting is especially engaging. I could make it more engaging if I put more time into it, but I don't know if that's what I want to spend time.
- to feel like my time spent writing this up wasn't wasted.
** TODO NeuroTech 2020
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: neurotech-2020
:EXPORT_FILE_NAME: index
:END:

*** Overview

I joined [[https://www.facebook.com/McGillNeurotech/][McGill NeuroTech]] this past fall. It's a small, fast-moving team that works on AI and software for brain-computer interface applications. I had the honor of getting to know lots of really smart people, and together we built the EMGBoard. The EMGeyboard interprets the signals from electrodes placed on the arm muscles in order to classify finger movements. The predicted movements are then rendered in our Unity application, either as input controls or text. Thus, this offers a novel way for consumers to interact with VR/AR systems.

A "keyboard" that comes in the form of wristbands that let you type in the air. [[https://www.youtube.com/watch?v=6IJuLtj3400][This]] is the final video we submitted to the NeuroTechX competition (We got first place!). Met a ton of awesome people.

I learned a lot about working on a team. I was responsible for the pipeline that connects all the components together, and the program that translates from finger words to english words.

I almost didn't join NeuroTech, thinking it might take too much time, but glad I did.

Marley is really cool.

Started out as a a programmer doing what I was asked, but overtime took more of a leadership position.

I struggle with hurting people's feelings.

I got to see what it's like to work for a good leader. They get the best work out of you, even when we weren't getting paid.

Very inspiring; makes we want to develop my leadership abilities.
** TODO What Makes A Good Leader?
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: what-makes-a-good-leader
:EXPORT_FILE_NAME: index
:END:

Does being a good leader sometimes require making people feel bad?
** TODO The Economics Of Not Cooking Food
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: the-economics-of-not-cooking-food
:EXPORT_FILE_NAME: index
:END:

Is it worth it to order take out?
** TODO Comparing Veganism and Composting
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: comparing-veganism-and-composting
:EXPORT_FILE_NAME: index
:END:
** TODO Patching Inconsolata Nerd Fonts Mono
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: patching-inconsolata-nerd-fonts-mono
:EXPORT_FILE_NAME: index
:END:

** DONE Discomfort Has No Role In Decision Making
CLOSED: [2021-01-21 Thu 21:27]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: discomfort
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2021-01-21 Thu 21:12]--[2021-01-21 Thu 21:27] =>  0:15
CLOCK: [2021-01-21 Thu 16:01]--[2021-01-21 Thu 16:28] =>  0:27
CLOCK: [2021-01-21 Thu 15:33]--[2021-01-21 Thu 16:01] =>  0:28
:END:

*** COMMENT What is Discomfort

Discomfort is a slight physical or emotional pain. It makes for a less pleasant experience and oftentimes your first reaction is to make it stop.

*** Discomfort Is Outdated

Discomfort, a slight physical or emotional pain, developed as an evolutionary necessity; historically, considering the unpleasantness of discomfort during decision making was for the best of the species. Berries make your stomach uneasy? Stop eating them. Prickly bush scratches your skin? Don't let it happen again.

On average your body does a good job correlating discomfort with actions that are bad for your well being, but it's important to note that your body isn't right 100% of the time!

The world has changed a lot since we developed the capacity to feel discomfort. I claim that people would be better off if they were to diminish or even eliminate the role that discomfort plays in the decision making process, opting instead for considering "long term" consequences. At least personally, this mentality shift has had a huge positive impact on my day to day life.

*** COMMENT Notes

for some instances, discomfort plays no role in the decision making process which should instead be purely rational.
Pain is experienced by all vertebrates. Discomfort is common among all mammals. This leads me to the claim that in the present day, we should try to elimate our 

Discomfort in Evolution

There are two types of discomfort: physical and emotional. I will mainly be talking about physical discomfort, but similar points can be made about emotional discomfort.

Why should temporary discomfort matter?

Discomfort is an evolutionary necessity; in the past, considering the unpleasantness of discomfort during the decision making process was for the best, but in the present day this is often times not the case.

This mentality shift of considering discomfort as something that is no longer relevant to decision making has a huge positive affect on daily life.

After removing discomfort, mainy life improvings activities open up. The open cost to consider now is time, which people can work better with

*** Benefits to Daily Life

There are many things that people know they should be doing try to do but can't do with success:
- eating healthy
- getting 8 hours of sleep a night
- exercising regularly
- taking cold showers

A common reason people don't commit to these resolutions is that they rationalize them away on the basis of the required discomfort. People don't want to miss out on the taste of junk food, or deal with the pain of a work out. After removing discomfort, the only reason left not to do build these healthy habits would be the cost of time, but even the busiest people can carve out a little bit of time for these activities that have much higher returns than the time investment (yes even you!).

*** Personal Example

Since the new year I have started every morning with a 20 minute workout. My workout consists of handstand pushups, pullups, hanging leg raises, and stretching. By framing the workout as having a cost of 20 minutes and forgetting about the discomfort I will experience during the workout, I am having an easier time maintaining the habit (knock on wood). It takes just 20 minutes and leaves me feeling energized for the rest of the day.

After my workout I hop into a cold shower. Similarly, I dispell thoughts relating to the discomfort of the cold water, and instead phrase the cold shower as a healthy experience that will take just 5 minutes. I wake right up and feel warm as soon as I get out of the cold.

*** Dire Needs

The previous examples were activites of relatively minor discomfort that have compounding positive effects when incorporating them into daily life. Another benefit of making them ritual is to prepare you for dire needs which may include:
- a necessary confrontation
- asking someone out
- asking for a raise
- building moral courage
- generally getting out of one's comfort zone

These are the types of scenarios where people often regret not stepping out of their comfort zones; by building a tolerance for discomfort you will more easily take them on.

> Keep the faculty of effort alive in you by a little gratuitous exercise every day. Do every day or two something for no other reason than that you would rather not do it, so that when the hour of dire needs draws nigh, it may find you not unnerved and untrained to stand the test - The Way To Willpower

*** Final Words

I hope that this mentality shift is as helpful to you as it was to me. Please leave any comments or reflections below :)




** DONE React Redux Firestore Infinite Scrolling :react:redux:firestore:@Software_Dev:
CLOSED: [2020-12-30 Wed 09:10]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: react-redux-firestore-infinite-scrolling
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-09-29 Tue 17:23]--[2020-09-29 Tue 17:43] =>  0:20
:END:

Recently I implemented infinite scrolling at [[https://artif.ai][Artifai]] with react-redux-firebase. It's not too difficult but it's helpful to work off of an example.

See below the component where the querying takes place.

#+begin_src js
export default () => {
  const firestore = useFirestore();
  const [recentArtifaications, setRecentArtifaications] = React.useState([]);

  const loadMorePosts = () => {
    (async () => {
      let recentArtifaicationsQuery = firestore
        .collectionGroup("artifaications")
        .where("accessLevel", "==", "public")
        .where("percentProcessed", "==", 100)
          .orderBy("created", "desc").limit(15);

      recentArtifaications.length !== 0 &&
        recentArtifaicationsQuery.startAfter(
          recentArtifaications.slice(-1)[0]["created"]
        );

      let recentArtifaicationsSnapshot = [];
      const querySnapshot = await recentArtifaicationsQuery.get();

      querySnapshot.forEach((doc) => {
        recentArtifaicationsSnapshot.push({
          id: doc.id,
          ...doc.data(),
        });
      });

      setRecentArtifaications([
        ...recentArtifaications,
        ...recentArtifaicationsSnapshot,
      ]);
    })();
  };

  useEffect(() => {
    // call loadMorePosts on component mount
    loadMorePosts();
  }, []);

  return (
    <>
      <Typography variant="h2" style={{ marginTop: "150px" }} align="center">
        Explore Other's Creations
      </Typography>
      <TripleImageViewList
        feed={recentArtifaications}
        view="general"
        loadMorePosts={loadMorePosts}
      />
    </>
  );
};
#+end_src

The function =loadMorePosts= loads the next 15 posts from firestore. This method is called from =TripleImageViewList= seen below.

#+begin_src js
const TripleImageViewList = (props) => {
  console.log(props.feed);
  return (
    <>
      <br />
      {props.feed.map((tileData, index) => (
        <React.Fragment key={tileData.id}>
          <TripleImageCard
            tileData={tileData}
            index={index}
            cardHeight={cardHeight}
            view={props.view}
          />
          {(index === props.feed.length - 5 && (props.feed.length < 100)) && (
            <Waypoint onEnter={() => props.loadMorePosts()} />
          )}
        </React.Fragment>
      ))}
    </>
  );
};
#+end_src

Here we use the [[https://github.com/civiccc/react-waypoint][react-waypoint]] library to trigger the =loadMorePosts= when the user only has 5 cards left to see. Ta-da! You now have infinite scrolling in your React app.

Links:
- [[https://www.youtube.com/watch?v=9dRk3bxEbS8&t=371s][Infinite Scrolling with React Waypoint]]
- [[https://stackoverflow.com/questions/60789004/about-infinite-scroll-in-react-js-and-material-ui][Infinite Scroll in React.js]]

** DONE The Two Types of Assholes                  :moral_courage:@Thoughts:
CLOSED: [2020-12-29 Tue 14:51]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: the-types-of-assholes
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-12-29 Tue 14:51]--[2020-12-29 Tue 14:58] =>  0:07
CLOCK: [2020-12-29 Tue 14:02]--[2020-12-29 Tue 14:51] =>  0:49
CLOCK: [2020-12-29 Tue 11:58]--[2020-12-29 Tue 12:23] =>  0:25
CLOCK: [2020-12-29 Tue 10:49]--[2020-12-29 Tue 11:35] =>  0:46
:END:

*** What Makes Someone An Asshole

Assholes are people with the power of willingness to do things that make them unpopular.

There are two types of assholes:
1. The good ones:
   <br> People who make themselves unpopular with good intentions that support the greater good
2. The evil ones:
   <br> People who make themselves unpopular with selfish intentions

Good assholes can be described as people having moral courage, i.e. people with the courage to take action for moral reasons despite the risk of adverse consequences. Sometimes being unpopular is what it takes to promote the greater good. It is in these scenarios that good assholes shine; they have the ability to say what needs to be said when no one else will.

See the [[https://en.wikipedia.org/wiki/Abilene_paradox][Abilene paradox]], for example, which describes a scenario in which "a group of people collectively decide on a course of action that is counter to the preferences of many or all of the individuals in the group", because nobody has the courage to speak up and potentially become unpopular. A good asshole wouldn't let this happen; he would do what he feels is right or important without caring about pissing people off. And everyone would be better off for it.

Evil assholes are people who help themselves to special advantages in cooperative life, without feeling bad about the negative effects on other people. These are not fun to be around. They do things like cut in line without emergency, put others down just to bring themselves up, etc.

*** Becoming A Good Asshole

We want to gain the power of willingness to become unpopular and use it for good; how do we do it?

[[https://markmanson.net/being-an-asshole][Mark Manson]] recommends three ingredients:
1. Decide what's more important that people's feelings
2. Build a tolerance feeling bad
3. Lean in to painful honesty

For me the most applicable idea is to make a new rule for youself: "if there’s something uncomfortable that you believe is important to say, just say it. Don’t think about it. Just trust that in the long run, more times than not, you’ll be happy that you said it. In fact, chances are, in the long run, other people will be glad you said it".

References:
- [[https://markmanson.net/being-an-asshole][Mark Manson on Being An Asshole]]
- [[https://www.huffpost.com/entry/defining-assholes_b_5273535][Huffpost Defining Assholes]]
- [[https://en.wikipedia.org/wiki/Abilene_paradox][Abilene Paradox]]

*** COMMENT Notes
"1. Decide what’s more important than people’s feelings

Most people let their life be dictated by feelings—both their own feelings and others’. They don’t even realize this because they haven’t stopped to think about it. But, as I’ve written before, if you allow your life to be dictated by feelings, then you’re going to be stuck in a shithole forever.

The key to developing the willingness to upset other people is to understand what’s more important than them being upset. Would you hurt someone’s feelings to save a dying family member? Yeah, probably. What about to save your career? I would hope so (some people probably don’t). What about to promote a good cause you care about?"

"2. Get good at feeling bad

Most people who are too nice think they are nice because they care too much about other people’s feelings. They say to themselves, “Well, I could never say that to her, because she’ll feel bad.” But they’re lying to themselves. They think they’re being altruistic, but they’re not.

They don’t want to say it to her because they’ll make themselves feel bad. Their sympathy for others is a tool that holds them back. They won’t hurt others’ feelings because then they’ll feel bad for that person and they can’t stand to feel bad themselves.

Get good at feeling bad and you’ll become okay at making others feel bad when necessary. I just got off the phone with a friend last night. I chewed him out for doing something pretty stupid that involved me. He felt awful. I feel awful that he feels awful. But I also know that it’s a good thing that we both feel awful. It’s for a good cause. So I can bear it.

But for me to be able to make him feel awful, I first need to be capable of feeling awful myself."

"3. Lean in to painful honesty

We’ve all been in that situation where we want to say something that’s important but there’s also a good chance that we’ll upset someone if we say it. There’s that uncomfortable tension inside us as we go back and forth on whether we should say it or not.

Create a new rule for yourself: if there’s something uncomfortable that you believe is important to say, just say it. Don’t think about it. Just trust that in the long run, more times than not, you’ll be happy that you said it. In fact, chances are, in the long run, other people will be glad you said it.

The first few times you’re an asshole in this way, it’ll feel terrifying. But once you get some of that positive social feedback, you’ll start feeling more comfortable with it. And it will come more naturally. You’ll be an asshole. But you’ll be their asshole."


*** COMMENT Less helpful resources
- https://medium.com/@Kurt_R/5-reasons-to-be-an-asshole-2709fc04bca8
- https://www.vice.com/en/article/avawb4/i-acted-like-an-asshole-for-a-week
- https://www.linkedin.com/pulse/20140507131711-1039282-why-it-s-ok-to-be-an-asshole-in-business/
** DONE Trying Out Emacs Calendar                   :@Productivity:org_mode:
CLOSED: [2020-09-30 Wed 10:35]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: trying-out-emacs-calendar
:EXPORT_FILE_NAME: index
:END:

I was investigating emacs calendar options anc ame across [[https://github.com/kiwanami/emacs-calfw/][emacs-calfw]]. It's a nice package for viewing calendar items from howm, ical, cal, or org in a google calendar like format.

I was mainly interested in org calendar. To get up and running clone the emacs-calfw repo and add it to your load path. then require then relevant files:
#+begin_src elisp
  (add-to-list 'load-path "/home/gautierk/.emacs-conf/emacs-calfw")
  (require 'calfw)
  (require 'calfw-org)
#+end_src
Now to display the calendar his =SPC SPC= and run =cfw:open-org-calendar=. You should see something like the following if you're on spacemacs:

#+html: {{< image src="./emacs-calfw-view.png" >}}

Press =W= to display the weekly view.

#+html: {{< image src="./emacs-calfw-weekly-view.png" >}}

It's awesome that this package exists, but too bad that it doesn't display rectangles positioned and sized based on the time and duration of the event in the same way google calendar does.

** DONE Serving a React App on a Subroute With Express :@Software_Dev:React:Express:
CLOSED: [2020-10-01 Thu 10:15]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: serving-a-react-app-on-a-subroute-with-express
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-09-29 Tue 09:45]--[2020-09-29 Tue 10:37] =>  0:52
:END:

There will come a time when you are looking to serve a create react app on a subroute via express. Look no further!

*** Router "basename"
There are a few places you need to indicate the route you will be serving the app from. Setting "basename" is the "BrowserRouter" component will make sure the router works correctly.

#+begin_src js
import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";
import { BrowserRouter } from "react-router-dom";
import * as serviceWorker from "./serviceWorker";

ReactDOM.render(
  <React.StrictMode>
    <BrowserRouter basename="/pun/dev/hpc_2">
      <App />
    </BrowserRouter>
  </React.StrictMode>,
  document.getElementById("root")
);
#+end_src

*** Package.json "homefolder"

#+begin_src json
{
  "homepage": "https://academic-login.rc.fas.harvard.edu/pun/dev/hpc_2",
}
#+end_src

This "homepage" value is exposed in the =process.env.PUBLIC_URL= variable at build time, so anywhere that you want to use a relative url, make sure to reference it like below:

#+begin_src js
useEffect(() => {
  axios
    .get(`${process.env.PUBLIC_URL}/api/sharedPartitionData`)
    .then((userSharedPartitionData) => {
      setSharedPartitionData(userSharedPartitionData.data);
    })
    .catch(function (error) {
      console.log(error);
    });
}, []);
#+end_src

*** Express configuration

Now you have your react app ready to go, and you're looking to serve it using express. The strategy is to store the react app in a subdirectory to the express app. See the following tree structure, where =client= is a react app:

#+begin_src 
.
├── app.js
├── client
│   ├── package.json
│   ├── public
│   │   ├── favicon.ico
│   │   ├── favicon.png
│   │   ├── index.html
│   │   ├── logo192.png
│   │   ├── logo512.png
│   │   ├── manifest.json
│   │   └── robots.txt
│   ├── src
│   │   ├── App.css
│   │   ├── App.js
│   │   ├── App.js.backup
│   │   ├── App.test.js
│   │   ├── components
│   │   │   ├── FairshareCardGrid.jsx
│   │   │   ├── FairshareTable.jsx
│   │   │   ├── PartitionCardGrid.jsx
│   │   │   ├── StorageCardGrid.jsx
│   │   │   └── TripleBar.jsx
│   │   ├── Fairshare.jsx
│   │   ├── Hello.js
│   │   ├── index.css
│   │   ├── index.js
│   │   ├── logo.svg
│   │   ├── PrivatePartitions.jsx
│   │   ├── serviceWorker.js
│   │   ├── setupTests.js
│   │   ├── SharedPartitions.jsx
│   │   └── Storage.jsx
│   └── yarn.lock
├── package.json
├── README.md
├── yarn-error.log
└── yarn.lock
#+end_src

For the express app you just need a single =app.js= file. Set the =basename= in the =basename= variable.

#+begin_src js
  const express = require("express");
  const bodyParser = require("body-parser");
  const path = require("path");
  const app = express();
  const port = process.env.PORT || 5000;
  const basename = "/pun/dev/hpc_2";
  const apiBasename = basename + "/api";
  const username = process.env.USER || "";


  // expose the body portion of an incoming request stream on req.body 
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({ extended: true }));

  // example api endpoint
  app.get(apiBasename + "/user", (req, res) => {
    res.json({ username: username });
  });

  // Serve any static files
  app.use(basename, express.static(path.join(__dirname, "client/build")));

  // Handle React routing, return all requests to React app
  app.get(basename + "/*", function (req, res) {
    res.sendFile(path.join(__dirname, "client/build", "index.html"));
  });

  app.listen(port, () => console.log(`Listening on port ${port}`));
#+end_src

You can see an example api endpoint at =`${basename}/api/user`=. It returns the username of the user running the express app.

*** Development

During development, you could rebuild the react app and serve it with express on port 5000 by running =node app.js=, but this requires rebuilding the react app everytim you want to visualize changes to the user experience. Instead you can use a reverse proxy from the react app to the express backend to speed up development. To accomplish this, add the following to your clientside =package.json=:

#+begin_src json
  {
    "proxy": "http://localhost:5000",
  }
#+end_src

This enables you to start the frontend by running =cd client && yarn start= and start the backend by running =node app.js=. The backend runs on port 5000. The frontend runs on port 3000 and proxies api requests to the backend.

Prepare a production build of the frontend with =cd client && yarn build=. Then you can run =node app.js= and the backend will serve the frontend.

Check out [[https://github.com/Ruborcalor/hpc-status-app][hpc-status-app]] for a working demo of a react app served on a subroute!

Links:
- [[https://medium.com/@svinkle/how-to-deploy-a-react-app-to-a-subdirectory-f694d46427c1][Deploying a react app to a subdirectory]]
- [[https://create-react-app.dev/docs/deployment/][Create react app deployment]]

** DONE Firestore Transactions with Python :@Software_Dev:firestore:python:firebase:
CLOSED: [2020-10-02 Fri 10:16]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: firestore-transactions-with-python
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-10-02 Fri 09:37]--[2020-10-02 Fri 10:08] =>  0:31
:END:

The documentation on writing firestore transactions with python is not especially extensive, so I figured I'd share what I learned when setting up transactions for my project [[https://artif.ai][Artifai]].

My goal was to pull an item from a queue collection, but I needed to avoid the scenario where two threads pull items from the queue at the same time. Transactions are perfect for this because you can ensure that no two machines pull the same item off the queue.

> In the case of a concurrent edit, Cloud Firestore runs the entire transaction again. For example, if a transaction reads documents and another client modifies any of those documents, Cloud Firestore retries the transaction. This feature ensures that the transaction runs on up-to-date and consistent data.

Here is how you create a transaction. Define a method with the =@firestore.transactional= decorator that has parameters for a transaction and a query reference.
#+begin_src python
  @firestore.transactional
  def claim_artifaication(transaction, queue_objects_ref):
      # query firestore
      queue_objects = queue_objects_ref.stream(transaction=transaction)

      # pull the document from the iterable
      next_item = None
      for doc in queue_objects:
          next_item = doc

      # if queue is empty return status code of 2
      if not next_item:
          return {"status": 2}


      # get information from the document
      next_item_data = next_item.to_dict()
      next_item_data["status"] = 0

      # delete the document and return the information
      transaction.delete(next_item.reference)
      return next_item_data
#+end_src

The goal of this transaction is to

1. read the last document from the queue
2. delete the document
3. return the information the document was storing

If this transaction is in progress and the queue collection gets modified (by another thread pulling an item from the queue), it will restart the transaction; this ensures that no two threads will pull the same item off of the queue. If there are no items left on the queue, the method returns a dictionary with status set to 2 (to be handled later in the program).

Great! We have now defined a transaction. In order to execute it you can do the following:

#+begin_src python
  import firebase_admin
  from firebase_admin import credentials, storage, firestore

  db = firestore.client()
  transaction = db.transaction()

  # initialize query
  queue_objects_ref = (
      db.collection("state")
      .document("artifaicationQueue")
      .collection("queueObjects")
      .order_by("created", direction="ASCENDING")
      .limit(1)
  )

  transaction_attempts = 0
  while True:
      try:
          # apply transaction
          next_item_data = claim_artifaication(transaction, queue_objects_ref)
          logging.debug("Successfully applied transaction")
          break
      except Exception as e:
          logging.error(f"Could not apply transaction. Error: {e}")
          time.sleep(5)
          transaction_attempts += 1
          if transaction_attempts > 20:
              db.collection("errors").document(str(uuid.uuid4())).set({
                  "exception": f"Could not apply artifaication claim transaction. Error: {e}",
                  "location": "Claim artifaication",
                  "time": str(datetime.now())
              })
              exit()
#+end_src

We create our =queue_objects_ref=, and then repeatedly try to execute the transaction in a =while True= loop. If the transaction fails, it throws an error which gets caught by the try except statement. If it isn't able to complete the transaction in 20 tries, it gives up and exits the program.

Hopefully this gives you an idea for how to build workflows with firestore transactions in python. Let me know if you have any comments or questions below!
** DONE Org Mode and Google Calendar :@Productivity:org_mode:google_calendar:
CLOSED: [2020-09-27 Sun 17:46]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: org-mode-and-google-calendar
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-09-25 Fri 10:15]--[2020-09-25 Fri 12:56] =>  2:41
:END:

I've been having an internal debate over org mode and google calendar. Normally I manage the scheduling of my courses using Google Calendar, but would it be better to use org mode instead?

*** Google Calendar Pros
- Great mobile support
- Reply "Yes" or "No" to event invitations
- Great display
- Reminders
- Share calendars with other people
- Color coding

*** Org Mode Pros
- Time tracking
- Note taking
- Vim bindings
- Less context switching
- The benefits of org

*** Deciding Questions
Don't need a perfect system. Looking for something good. If it ain't broke don't fix it.
- What am I missing by using org mode?

  I feel like I am missing shared calendars and a great weekly view.
- Are shared calendars valuable?

  My understanding is that they practically become a necessity once entering the work force. Personally, however, I currently have no use for them.
- Is a great weekly view valuable?

  It makes it easy to see conflicting events, and how they are spaced out throughout your day.

*** COMMENT LifeStyle
In answering these questions I think it's important to consider you own lifestyle.

Different modes:
- Student
  - Many deadlines
  - No shared calendar
- Worker
  - Fewer deadlines
  - Shared calendar

Personally I am a student so I will keep the student's needs in mind when making my decision. The main difference I see is that I don't have to worry about shared calendars as much.

*** Options
**** Separated
Use org mode for todos/deadlines and google calendar for scheduled events.

This allows you to get all the benefits of google calendar for scheduled events, and all the benefits of org mode for todos/deadlines. A potential downside is that this approach requires more context switching. You'll have to consult the org agenda and the google calendar at the same time in order to make sure that you aren't missing anything.

Time tracking becomes difficult, because if you want to time track an event from the calendar, you'll have to duplicate it into org. This might not be so bad though. My main events would be:
- lectures
- meetings

And it's not important to get fine grained time tracking to the specific meeting itself. A general task of =meetings= for a set of categories that I could clock to would suffice.

**** Synced
By using [[https://github.com/myuhe/org-gcal.el][org-gcal]], you can push events from org mode to google calendar, and pull them from google calendar to org mode.

In either case you get to take advantage of the google calendar view without giving up org mode, but there are some limitations to the integration.
- repeating org events
- coloring

You also have to deal with the potential headache of keeping everything synced up.

**** Isolated
Use org mode for everything and don't use google calendar

There are solutions like [[https://github.com/kiwanami/emacs-calfw/][emacs-calfw]] that try to implement a better calendar view for org mode. The experience is not as nice as google calendar though.

It can be problematic to completely give up google calendar. Shared calendars come to mind. It is hard to escape google calendar.

It's important to remember the main points of google calendars view:
- easily find event conflicts
- visualize the weekly schedule

Both of these points can be accomplished from the org agenda, but not as well.

***** COMMENT Reflect ont the problem
problem:
- don't go to appointment it gets left TODO. solution could be to mark it as done/cancelled, but i'm eventually going to get to it. 
- Then it also doesn't show future appointments which is problematic for the schedule. What about not using scheduled strategy? 
- Doesn't show in calendar after marking as done.

Google calendar is nice. I think that's the way.

*** Next Steps

Sometimes it's more effective to experiment then to theorize. After reflecting on the options I've decided I won't pursue the syncing strategy; dealing with syncing would produce a headache that outweights the potential benefits.

This leaves me deciding between isolated and separated. The main difference being that separated gives better weekly view, and isolated means "inline" notes for events.  At first I had an irrational fear of the separated approach, but now I am warming up to it. Even so, I'm gonna give the isolated appraoach a go for a couple weeks and see if I feel like I am missing anything.

Stay tuned by subscribing to the [[https://colekillian.com/index.xml][rss feed]] and feel free to leave a comment below!
** DONE Hacking Into My Computer After Getting Locked Out   :@Stories:linux:
CLOSED: [2020-09-25 Fri 10:11]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: hacking-into-my-computer-after-getting-locked-out
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-09-25 Fri 09:25]--[2020-09-25 Fri 10:15] =>  0:50
:END:
*** Just a Normal Day

I updated all the packages on my system with =pacman -Syyu=. Didn't think much of it at the time.

Later in the day my computer froze when using bash to execute a python script I was developing (whoops).

After waiting a minute to see if my computer would recover, I initiated force shutdown.

I started up my computer as normal, but this time I couldn't login! It was disheartening to be shown =Password Incorrect= over and over. Caps lock is off, check. Try a couple keyboards, check.

*** Hacker Mode

At first I was scared that the script I ran had somehow changed my password. Off to the newbie corner I go :). Uh oh, I hadn't read the patch notes. Turns out updates to =PAM= and =PAMBASE= might prevent login. Other people were having the same problem, all I had to do was login with rescue mode!

I follow the instructions to boot rescue mode. i.e. pressing =e= on the grub screen to edit the boot parameters and adding the kernel option =systemd.unit=rescue.target=. I find myself in a terminal prompted for my root password; what's my root password again? This can't be good. How can I possibly login without my root password?!

Back to the newbie forums. Luckily I find someone with a similar problem. He was having trouble logging into rescue mode because he had never set the root password in the first place. Turns out the solution is to reset your root password without knowing your root password. I couldn't believe how easy the process was.

Instead of appending =systemd.unit=rescue.target= to the kernel params, I appended =init=/bin/bash=. This tells the computer to run =/bin/bash= as init rather than the system init and puts you into a root shell without being prompted for a password. Your root file system is mounted as read-only now, so the first step is to mount it as read/write: =mount -n -o remount,rw /=. Then use =passwd= to create a new password for the root user, =reboot -f=, and you are good to go!

> If you want to "fix" this, lock GRUB and your BIOS with a password and put your hard disk first in boot order. If someone else has physical access and can put the (non-encrypted) hard disk into another computer, you have lost anyway

After that I was able to successfully boot into rescue mode and fix the problems with PAM. I did the following:

#+begin_src bash
cd /etc/pam.d/
mv system-login system-login.backup
mv system-login.pacnew system-login
#+end_src

One final reboot to the computer, and here I am!

*** Final Thoughts

I was late for my 10 oclock shutdown because of this, but thank god I'm back. This could have been quite a disaster; I'll be backing up my pc tomorrow.

This is the first time I've ever had a "breaking change" with manjaro, but it was my fault and could have been prevented by reading the update notes. Live and learn.

Mentioned links:
- [[https://unix.stackexchange.com/questions/34462/why-does-linux-allow-init-bin-bash][Why does linux allow init bin bash]]
- [[https://forum.manjaro.org/t/cant-login-after-update/16231][Can't login after update]]
- [[https://forum.manjaro.org/t/stable-update-2020-08-28-kernels-systemd-pam-pambase-kde-git-deepin-pamac-nvidia-450-66-libreoffice-7-0/16146/2][Update notes]]
- [[https://forum.manjaro.org/t/cannot-boot-to-rescue-mode-solved/25636][Cannot boot to rescue mode solved]]

** DONE First ox-hugo post                     :org_mode:hugo:@Productivity:
CLOSED: [2020-08-24 Mon 21:51]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: first-ox-hugo-post
:EXPORT_FILE_NAME: index
:END:
*** This is Awesome!

I just installed [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]], an org extension that makes it easy to export org files as hugo posts.

*** Setting Up

On spacemacs it was as easy as adding =ox-hugo= to the list of =dotspacemacs-additional-packages=, along with adding the following to user-config:
#+begin_src elisp
(use-package ox-hugo
  :ensure t          ;Auto-install the package from Melpa (optional)
  :after ox)
#+end_src

Then you're good to go. I'm excited about the way it makes it easy to write posts via org-capture, but I should really be spending more time writing and less time configuring emacs (:

Even though it's easy to setup, I recommend reading through the entire [[https://ox-hugo.scripter.co/][ox-hugo]] documentation, and this [[https://www.shanesveller.com/blog/2018/02/13/blogging-with-org-mode-and-ox-hugo/][blog post]] for more specifics on the workflow.

*** Extra Goodies

I recommend setting up auto-export on saving, org-capture setup.

Personally I like using hugo leaf bundles for all my hugo posts because it helps keep the images organized.


*** Have fun!
** DONE First Thoughts On Org Roam                  :org_mode:roam_research:@Productivity:
CLOSED: [2020-08-24 Mon 22:49]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: first-thoughts-on-org-roam
:EXPORT_FILE_NAME: index
:END:
*** Background

I find myself taking a lot of notes, and was looking for a place to store them.

[[https://roamresearch.com/][Roam Research]] is the big craze these days: "A note-taking tool for networked thought." It seemed like just what I was looking for. It's growing quickly and has a great community. I was going to give it a try when I happened upon [[https://github.com/org-roam/org-roam][org-roam]]: "a Rudimentary Roam replica with Org-mode".

Org-roam seemed like the best of both worlds. I get the benefits of roam research, for free, all from spacemacs! It's in its early stages, but like roam research it is growing very quickly.

This is where my roam graph stands as of today (displayed by =org-roam=server=):
[[file:org-roam-graph-08-24.png]]

*** Installation

Getting setup on spacemacs is straightforward. These are the relevant parts of my config for getting basic org-roam functionality:

#+begin_src elisp
(with-eval-after-load 'org
      (use-package company-org-roam
      :ensure t
      ;; You may want to pin in case the version from stable.melpa.org is not working 
                                        ; :pin melpa
      :config
      (push 'company-org-roam company-backends))

    (require 'org-tempo)
    (require 'org-protocol)
    (require 'org-roam-protocol)
  
  (use-package org-roam
      :ensure t
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "/home/gautierk/.org/roam/")
      :init
      (progn
        ;; (spacemacs/declare-prefix "af" "org-roam")
        (spacemacs/set-leader-keys
          "afl" 'org-roam
          "aft" 'org-roam-dailies-today
          "aff" 'org-roam-find-file
          "afg" 'org-roam-graph)

        ;; (spacemacs/declare-prefix-for-mode 'org-mode "mr" "org-roam")
        (spacemacs/set-leader-keys-for-major-mode 'org-mode
          "fl" 'org-roam
          "ft" 'org-roam-dailies-today
          "fb" 'org-roam-switch-to-buffer
          "ff" 'org-roam-find-file
          "fi" 'org-roam-insert
          "fI" 'org-roam-insert-immediate
          "fg" 'org-roam-graph)))
  )
#+end_src

If you want to enable [[https://github.com/org-roam/org-roam-server][org-roam-server]], add the following in the =with-eval-after-load 'org= block and make sure emacs server is started:

#+begin_src elisp
(use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src

*** First Thoughts

I'm probably still in the honey moon phase, so i'll have to revisit these thoughts later, but right now i'm having a blast. It's great that taking notes is as easy as =SPC a f f=, and it's very rewarding to see the org roam graph growing over time. 

I will say that at this point I rarely look at a note i've taken in the past, but even so writing something down helps me think things out, and potentially improves my retention on a topic. Hopefully over time I'll capitalize more on the ability to look at historical notes.
** DONE Moving From GSuite to Migadu     :email_hosting:email:gsuite:migadu:@Productivity:
CLOSED: [2020-08-27 Thu 00:22]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: moving-from-gsuite-to-migadu
:EXPORT_FILE_NAME: index
:END:
Like many things, moving to Migadu from another email hosting provider is a two step process:

1. Deciding that Migadu is the right option for you
2. Making the switch
   
*** Why Migadu

Just recently, Migadu went through a [[https://www.migadu.com/blog/redesign/][redesign]]. Here are some helpful links for learning about their services:
- [[https://www.migadu.com/pricing/][Pricing]]
- [[https://www.migadu.com/procon/][Pros/Cons]]

The points that stuck out most to me:
1. An account can have unlimited mailboxes on a domain at no additional charge.
2. There is a soft limit of 5 registered domains on the micro plan
3. Competitive Pricing

Combining these points, and you're telling me that with the micro plan I get unlimited mailboxes, 5 domains, all for a quarter of the price of a single domain on GSuite? Sign me up! I expect this feature to come in super handy when setting up email accounts on additional domains for side projects.

*** Making the Switch

**** Setup

1. Sign up for Migadu and configure DNS
2. Create a mailbox for yourself

**** Migration

There are several options for migrating mail to migadu. Some popular options are shared [[https://web.archive.org/web/20190602203512/https://www.migadu.com/en/guides/mailtransfer.html][here]].

Personally, I let Luke Smith's [[https://github.com/LukeSmithxyz/mutt-wizard][mutt-wizard]] do most of the heavy lifting. The steps for me were to:
1. Add my new migadu account using mutt-wizard, indicating that I want to store all of my mail locally.
2. Navigate to `~/.local/share/mail` and copy the contents of my previous mail folder my new migadu account folder. This involves changing the names of Gmail specific mailboxes to Migadu mailboxes. i.e. from "[Gmail].All Mail" to "Archive". I also followed [[https://aaronweb.net/blog/2014/11/migrating-mail-between-imap-servers-using-mbsync/][this guide]] to strip the mbsync metadata before sending the mail to the Migadu server.
3. Run `mw sync`

That's it!

*** Enjoy the benefits of Migadu
I lied, there's actually a third step in the process of moving to Migadu: enjoy!

I'm most looking forward to avoiding the headache of setting up domain specific email accouts for side projects. Exciting times lay ahead.
** DONE Syncing Org Files to Dropbox - Access Them From Anywhere :org_mode:@Productivity:
CLOSED: [2020-09-18 Fri 09:00]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: setting-up-org-mode-on-mobile
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-09-04 Fri 12:17]--[2020-09-04 Fri 13:15] =>  0:58
:END:
By Adding org files to the cloud, you can access them from anywhere (yes, even when you're not at your computer!). This is very useful, especially for accessing org files from a mobile device.

*** Setting Up Dropbox


Create a [[https://www.dropbox.com/h][dropbox]] account and install it on your computer. The Dropbox free tier gives 2GB of storage. On arch you can install with =yay -S dropbox=.

By default, dropbox will create a folder at =~/Dropbox=. Now we need to connect the agenda files to this folder. We can do this with a symlink!

You can have symlinks that link to items both in and outside of your Dropbox account; however, these two types of symlinks sync differently. See [[https://help.dropbox.com/installs-integrations/sync-uploads/symlinks][Dropbox symlink help]].

- If you create a symlink that links to an item in your Dropbox account, we’ll sync the the symlink file at its location and the item that it links to at its location respectively
- If you create a symlink that links to an item outside of your Dropbox account, when you sign in to dropbox.com you’ll only see the symlink file but not the content it links to


This means that we actually have to move the agenda files into the =~/Dropbox= folder, and then create a symlink back to their original location. For me this was easy because because I have a folder designated to storing my agenda files.

#+begin_src bash
mv ~/.org/agenda/ ~/Dropbox
ln -s ~/Dropbox/agenda ~/.org/agenda
#+end_src

There you go, now your org files are synced to your dropbox and can be accessed from anywhere with an internet connection.

*** What Next?

Now that your files are synced to Dropbox, it's super easy to get started with a mobile org program like =Organice= or =Orgzly=. For =Organice= you navigate to [[https://organice.200ok.ch/][https://organice.200ok.ch/]] in a web browser, sign in, and you're done. You can learn more about the differences between =Organice= and =Orgzly= [[https://colekillian.com/snippets/comparing-organice-and-orzly/][here]].

** DONE Comparing Organice and Orzly                :org_mode:@Productivity:
CLOSED: [2020-09-04 Fri 11:58]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: comparing-organice-and-orzly
:EXPORT_FILE_NAME: index
:CATEGORY: Productivity
:END:
I was looking for a way to connect to org mode from my phone. My main goals were to:
- Write todos when away from the computer
- Read todos when away from the computer
- Timetracking when away from the computer

In my search I came across the following possible solutions:
- [[https://github.com/DanielDe/org-web][org-web]] :: org-mode on the web, built with React, optimized for mobile, synced with Dropbox and Google Drive.
- [[https://github.com/200ok-ch/organice][Organice]] :: A community driven fork of org-web with the commitment of a Swiss company behind it.
- [[https://github.com/orgzly/orgzly-android][Orgzly]] :: org-mode on android, a native mobile app.
- [[https://beorgapp.com/][Beorg]] :: org-mode on ios, a native mobile app.
- [[https://news.ycombinator.com/item?id=13829075][Termux]] :: Run emacs from termux on android. Not built with mobile in mind.
- [[https://github.com/bnankiewicz/organic][Organic]] :: org-mode on android, a native mobile app; unmaintained.

For me it was easy to narrow down my choice to Organice and Orgzly (I am on Android). At that point it became difficult to decide so I gave both a try. These are my initial impressions:

*** Organice
**** Pros
 - Capture templates
 - Easy time tracking.
 - Great user experience feel
 - Agenda view
 - Search functionality
 - Support for checkboxes
**** Cons
- Offline support not as good
- No reminders
**** Screenshot
[[file:./organice-mobile-view.png]]

*** Orgzly
**** Pros
- A native android app.
- Reminders for scheduled tasks.
- Agenda view
- Offline Support
- Search functionality
**** Cons
- Not easy to do time tracking from mobile.
- No capture templates.
- User experience not as intuitive.
**** Screenshot
[[file:./orgzly-mobile-view.png]]

*** Conclusion

In deciding, its important to keep in mind the goals for using org mode from mobile.
- Write todos when away from the computer
- Read todos when away from the computer
- Timetracking when away from the computer

In keeping with these goals, I prefer Organice because of the capture templates and time clocking. A nicer user experience is an added bonus. Yes, Orgzly has the advantage of better offline support, but I rarely see myself without access to mobile data. Orgzly has the advantage of reminders for upcoming tasks, but I don't rely on these types of reminders from my mobile device.

Keep in mind these are my initial impressions. My plan is to go with Organice for a few weeks and report back with anything else I notice.

Feel free to leave a comment below!
** DONE The Way To Willpower By Henry Hazlitt
CLOSED: [2020-12-01 Tue 19:04]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: the-way-to-willpower
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :Score 8 :Thoughts The Way to WillPower was published in 1922, but still packs a ton of super valuable information relating to "will-power". I found many of its ideas useful in my everyday life. It's a relatively quick read, I definitely recommend!
:END:

*** Summary and Notes (By Chapter)
**** A Revelation
Introduces the idea that the will does not exist as another faculty alongside the memory, imagination, and a way to reason.
**** The Intellect as a Valet
Claims that the intellect is responsible for choosing between desires.
**** The Price One Pays
There is a price to be payed for valuing remote desires over present ones.
**** Old Bottles for the New Wine
The will may be defined as our desire to be a certain sort of character. If this desire is strong enough, it can assist your intellect to make decisions that value the future. Will-power may be defined as the ability to keep a remote desire so vividly in mind that immediate desires which interfere with it are not gratified.
**** Resolutions Made and Resolutions Kept
It's problematic that people make too many resolutions and then don't keep them. Instead people should think long and hard about the prices associated with a resolution, and then only make them when they are confident that they can keep them. This helps avoid the demoralizing act of breaking one. 
**** Success and the Capital S
Decide for yourself what "success" means; Don't make the mistake of continually trying to obtain the things that the people around us want or profess to want, rather than what you want yourself, because you have never really tried to examine whether there is any difference between the two. After reflecting on success, decide if you are willing to pay the price to get there. 
**** The Scale of Values
Material values are not the way to go. A man's goal ought to be (beyond the mere duty of making himself happy) to increase social well-being to confer the greatest benefits he can upon humanity. So long as fame and money are the ends sought, the benefits conferred upon humanity are mere by-products; whereas, in any civilization worthy of the name, the ends sought by individuals ought to be social well-being, and fame and money the by-products.
**** Controlling One's Thoughts
Tips for carrrying out resolutions:
- Whatever our ideals, whatever our resolutions, we should, before adopting those resolutions, calmly and coldly count the price of carrying them out. Think not alone of the benefits of keeping the resolve, but of the disadvantages.
- Once you have made your decision, having coldly decided that that is what you want and that you are willing to pay the price, your decision is forever beyond dispute. You should never ask yourself again whether the other course it possible.
- Dwell on the benefits of carrying your resolove out, not on the evils of failing. Fill the mind with the positive idea of your resolve.
- When combating insomnia, don't say to oneself "I shall sleep". Instead say "I sleep".
- Don't defy temptation, instead evade it. Don't do things that trigger desires you don't want.
- After mastering evading temptation, you can start to add it back in. "It breeds great perfection if the practice be harder than the use".
**** The Omnipresence of Habit
Desires and fears are not the sole determinants of action; there is also habit. Habit is the doing of a thing without conscious attention and often without thought of the purpose of doing it.
**** The Alteration of Habit
When you first set about to abolish a bad habit and establish a good one, it is going to take all the effort, all the "will-power", at your command. But habit begins soon to take the place of will-power; it will require less and less effort. You make your nervous system your ally instead of your enemy.

Tips for altering habits:
- In acquisition of a new habit or the leaving off an old one, we must take care to launch ourselves with as strong and decided an initiative as possible. This helps give momentum and postpones a potential breakdown.
- Never suffer an exception to occur till the new habit is securely rotted in your life.
- Seize the very first possible opportunity to act on every resolution you make, and on every emotional prompting you may experience in the direction of the habits you aspire to gain.
- When temptations arise, instead of telling yourself "I will begin to reform the next time", tell yourself that "the last time was the last".
**** Will and The Psychoanalysts
This chapter focuses on discussing how psychoanalysts have it wrong. Points:
- "Whichever your belief you tend to make your belief true".
- There is a difference between a desire and a craving. We have a desire for food, but a craving for cigarettes, whiskey, morphine.
- Oscar Wilde said: "The only way to get rid of a temptation is to yield to it". Like all good epigrams, it is at least true in a special sense. It is true in that if you yield to a temptation, you will get rid of it "for the moment". But everytime you yield you do two things: increase the intensity of the desire and lessen the power of resistance.
- You develop and strengthen the craving by use, just as you develop a muscle by use. Everytime you resist a desire you strengthen your power to resist.
- Makes a point that sexual craving can be fought, that it can be lived down, that it can be conquered, that the conquest of it would immensly strengthen the character, and make most other moral victories comparatively easy. This differs from psychoanalysts who believe "it is not only impossible to conquer the sexual passion, but highly dangerous to try".
**** Concentration
Discusses what to do with your will-power once you have it. Points:
- Minute-to-minute concentration is the ability to keep your mind upon a certain subject for a given period, say for ten minutes, one half hour or two hours without interruption.
- Night-after-night concentration is the ability to specialize in a certain subject or in a certain branch of that subject until you have mastered it thoroughly, before advancing to other subjects.
- Concentration is primarily an act of will (desire of character). It need not necessarily by so. If you enjoy working, getting up early, remaining home nights, staying sober, you will do so without effort. If you are interested in a book or in a particular subject, you will read it or meditate upon it without effort. But you need will-power in action precisely because you do not enjoy doing these commendable things, and you need will-power in reading, thought or writing precisely because your mind will otherwise be distracted by lack of lapses of interest in the subject at hand or by greater interest in something else.
- The act of will involved in concentration is the same in principle as any other act of will
  - We must be certain in your own mind that the end is worth while.
  - There is a price attached to concentration. We will have less time for other things. We must be content to remain somewhat ignorant of the other things, at least for a time.
  - This applies particuarly to night-after-night concentration. If you keep switching subjects, you won't be able to specialize adequately. By trying to know something about everything, you may miss really knowing anything about anything.
  - One needs one's play to keep from going stale, but there are limits to this principle. No man will become an savant from an evening a week. "Most careers are made or marred in the hours after supper".
  - When our mind wanders, we do so because of a half-conscious belief that the new idea, problem or fact needs attending to is important. If it were to truely be important, it would be so only by accident. Nine times out of ten we should find that they are not.
  - Forms of involuntary concentration of which you were not conscious, were possible because the interest in the subject was intense enough. An example is when you are asked a question and don't even notice.
  - When a person is left alone for a short time, he often takes pleasant but uneducative roamings. The only way a man can put a stop to this is to snap off his train of day-dreaming the first moment he becomes aware of it, and to address his mind to some serious subject. If he has never done this, he will find the effort great. But "just do it".
**** A Program of Work
There are some tasks that we don't even see as anything requiring will-power at all, simply because they do not come in the teeth-gritting class, but that we continue to put off anyways. The reasons for this are not being as efficient as we might be, and procrastination from lack of will-power.

Makes an example of a person who decides to devote evenings to the study of money and banking. They could learn it just as well at home as by going to night-school, but the rigidity of night-school means it requires less will-power. Another element is that it is much easier to say to a friend: "I'm sorry I'd like to go, but I have to go to night-school" then it is to say "I'm sorry but I have to stay home and study". Your friend is likely to be skeptical. He may be unable to see than an obligation to yourself is quite as sacred as an obligation to others. But you have to commit anyways and stick to your self-study schedule. Note that it is much easier for the discipline of will-power to plan modestly and to carry out your schedule than to plan greatly and fail. The first builds self-confidence; the second destroys it.
**** The Daily Challenge
Keep the faculty of effort alive in you by a little gratuitous exercise every day. Do every day or two something for no other reason than that you would rather not do it, so that when the hour of dire needs draws nigh, it may find you not unnerved and untrained to stand the test.

There is the practical example of asking for a raise. You know you are worth more money, but you don't have the courage. A test of meeting the challenge is the way you feel at the end of the day. If you have met the challenge, you will be rewarded with a glow of soul; if you have evaded or postponed it, your lot will be a sense of guilt.

Emotion follows action, not the other way around. If you really mean to do it at all, insist upon fixing a definite deadline.

Another case is when you would like to give the answer "No". Yet you fear to give offense; you fear friendship, you fear having to defend your position; you fear embarassment. A man cannot respect himself if he grants a request or gives money to a beggar not because he believes the request is fair, or to relieve the beggar's distress, but simply because he cannot look his supplicant in the eye and tell him No.

There is always the infinitude of bad habits to be broken and good habits to be formed. One example is a cold shower every morning: it is an excellent will exercise, which more than pays for itself in its effects upon your health.
**** Second And Third Winds
There are times when physical and mental fatigue appear to make us quit a task. But eight times out of ten is it flagging interest, rather than real fatigue, which makes us quit. As long as interest is intense enough, physical and mental fatigue won't really matter.

There are two main ways to get past this problem: 
1. Diversification. By turning from one subject to another, you sustain or increase your interest in the subjects.
2. Sheer effort. Trusting that after a time either the interest will rise again or the fatigue will decrease. "Heroism is endurance for one moment more".

This can be a dangerous doctrine that would leave to overwork, overstrain and nervous breakdown. It is possible to overdo it; but for overwhelming majority it is not the slightest danger. Most breakdowns attributed to overwork do not come from overwork, but from worry, dissipation and unhygienic living. Indolence will always find excuses for its own existence.
**** Moral Courage
Final notes before parting from the book:
- Never boast to friends about will-power. They are apt to become cynical and facetious, especially when you have broken some major or minor resolution. You want your friends to know of your will-power, but the best way for them to discover it is through actions, not words.
- Don't be a prig, someone who has become vastly well satisfied with himself. His chief pastime is to talk about the shortcomings of over the people.
- True willpower is perfectly compatible with true humility.
- It is in general more profitable to reckon up our defects than to boast of our attainments. Sad is the day for any man when he becomes absolutely satisfied with the life that he is living, the thoughts that he is thinking and the deeds that he is doing; when there ceases to be forever beating at the doors of his soul a desire to do something larger, which he feels and knows he was meant and inteded to do.
- Don't be stubborn. Don't fancy that will-power is incompatible with making yourself agreeable. A man who stands for principles in which you believe has backbone; a man who stands for principles in which you do not believe is stubborn.
- The man with backbone will never give in because of mere lack of physical and moral courage. Moral courage is the rarest thing on earth. How many had the ecourage merely to make themselves unpopular.
- How can it profit a man to be able to think if he does not dare to. You must have the courage to go where the mind leads, no matter how startling the conclusion. This may require the courage to stand against the whole world.
- Great is the man who has that moral courage, for he indeed has achieved will-power.
  
*** My Top 3 Quotes

- "We may think his ethical ideas mistaken, and mistaken they may be; but we cannot but admire the strength of character which leads him to act them out in spite of social opposition."
- "If your ability to refuse to yield to this particular impulse becomes in your mind a challenge to and a test of your entire character, you have thrown into the scale a mighty force to ensure your taking the right action."
- "Sad is the day for any man when he becomes absolutely satisfied with the life that he is living, the thoughts that he is thinking and the deeds that he is doing; when there ceases to be forever beating at the doors of his soul a desire to do something larger, which he feels and knows he was meant and intended to do."

*** How The Book Changed Me

You would think that a goal of reading the book is to improve your will-power, and that's definitely an effect that it had on me. I find that even just having the words to conceptualize will-power as the desire to be a certain character helps me resist "temptation". I also find the "rules of will-power" to be very helpful:
1. Whatever our ideals, whatever our resolutions, we should, before adopting those resolutions, calmly and coldly count the price of carrying them out. Think not alone of the benefits of keeping the resolve, but of the disadvantages.
2. Once you have made your decision, having coldly decided that that is what you want and that you are willing to pay the price, your decision is forever beyond dispute. You should never ask yourself again whether the other course it possible.

Here i'll list some ways my mindset changed after reading the book:
- More value for the importance of habits
- An appreciation for "Whichever your belief you tend to make your belief true"
- Opened my mind to the perspective that sexual desire can be conquered. I rarely see that point made.
- I related to the example of a person who decides to devote some evenings to studying and the difficulty of telling friends. Previously I would tell myself that I would make up for it by becoming more efficient. But now I'm more inclined to say "No" sometimes. I still see a need for occasional "play to keep from going stale".
- I like the idea of a daily challenge. I already take cold showers, but I'll be introducing some more daily challenges.
- Cool to read the idea of using sheer effort to overcome physical and mental fatigue.
- I have a stronger desire for moral courage than before.
- Just do it.

*** How I Discovered It
I discovered the book through [[https://vasilishynkarenka.com/][Vasili]] who very kindly gifted it to me. Thank you!

*** Time Spent Reading
*Total time: 3:48*
#+begin_src 
:LOGBOOK:
CLOCK: [2020-11-10 Tue 17:16]--[2020-11-10 Tue 18:02] =>  0:46
CLOCK: [2020-11-10 Tue 16:34]--[2020-11-10 Tue 17:16] =>  0:42
CLOCK: [2020-11-09 Mon 11:10]--[2020-11-09 Mon 11:50] =>  0:40
CLOCK: [2020-11-09 Mon 10:28]--[2020-11-09 Mon 11:10] =>  0:42
CLOCK: [2020-11-07 Sat 08:03]--[2020-11-07 Sat 08:22] =>  0:19
CLOCK: [2020-11-06 Fri 15:43]--[2020-11-06 Fri 16:22] =>  0:39
:END:
#+end_src

*** Time Spent Reviewing/Writing

*Total time: 3:19*
#+begin_src 
:LOGBOOK:
CLOCK: [2020-12-01 Tue 13:25]--[2020-12-01 Tue 14:35] =>  1:10
CLOCK: [2020-12-01 Tue 11:06]--[2020-12-01 Tue 13:15] =>  2:09
:END:
#+end_src
** DONE Org Pomodoro and Polybar   :org_mode:pomodoro:polybar:@Productivity:
CLOSED: [2020-12-23 Wed 11:19]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: org-pomodoro-and-polybar
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-12-23 Wed 11:19]--[2020-12-23 Wed 11:29] =>  0:10
CLOCK: [2020-12-23 Wed 10:33]--[2020-12-23 Wed 11:19] =>  0:46
:END:

*** The Pomodoro Technique

The pomodoro technique is a time management system where you do focused work for a set period of time (usually 25 minutes), take a quick break (usually 5 minutes), and then start again. It's great for boosting productivity because you can hold yourself accountable to finishing a pomodoro once you start it.

It was about time to get pomodoro working with org-mode. Luckily there's an awesome package, [[https://github.com/marcinkoziej/org-pomodoro][org-pomodoro]], that let's you do just that.

*** How The Package Works

There's only one command exposed by the org-pomodoro package: =org-pomodoro=. If you don't have an active pomodoro, calling =org-pomodoro= will start a timer (25 minutes by default) and clock in to the currently focused task. Once the timer runs out, a noise will be played and you will be clocked out of your task. 5 minutes later, another noise will be played to let you know that the break is over. It's then up to you to start another pomodoro by calling =org-pomodoro= again.

If you call =org-pomodoro= when you already have a pomodoro going, you will be prompted with whether or not you want to stop your running timer.

On spacemacs the keybindings for =org-pomodoro= are =SPC m C p= or =, C p=.

*** Screenshots

#+html: {{< image src="./org-pomodoro.png" caption="When pomodoro timer is running" >}}

#+html: {{< image src="./org-pomodoro-cancel.png" caption="After cancelling a pomodoro timer" >}}

*** Customization

**** Notifications

The alert noise is nice, but doesn't always catch my attention, especially if I have my computer muted.

Luckily it's easy to customize org-pomodoro to use libnotify so that you get visual notifications alongside the auditory ones: 

#+begin_src elisp
  (use-package org-pomodoro
    :ensure t
    :commands (org-pomodoro)
    :config
    (setq
     alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil)))
     ))
#+end_src

**** Pomodoro Length

A common alternative to the 25 - 5 pomodoro settings is 50 - 10. I find that 50 - 10 works better for me. Again it's a quick change:

#+begin_src elisp
  (use-package org-pomodoro
    :ensure t
    :commands (org-pomodoro)
    :config
    (setq
     org-pomodoro-length 50
     org-pomodoro-short-break-length 10
     ))
#+end_src

**** Connecting to Polybar

At this point we have a working org-pomodoro, but we can see the remaining time on the timer when we are using emacs. Believe it or not sometimes I am working outside of emacs, but I still want access to the time left. We can use emacsclient to make this happen:

#+begin_src elisp

  (defun ruborcalor/org-pomodoro-time ()
    "Return the remaining pomodoro time"
    (if (org-pomodoro-active-p)
        (cl-case org-pomodoro-state
          (:pomodoro
             (format "Pomo: %d minutes - %s" (/ (org-pomodoro-remaining-seconds) 60) org-clock-heading))
          (:short-break
           (format "Short break time: %d minutes" (/ (org-pomodoro-remaining-seconds) 60)))
          (:long-break
           (format "Long break time: %d minutes" (/ (org-pomodoro-remaining-seconds) 60)))
          (:overtime
           (format "Overtime! %d minutes" (/ (org-pomodoro-remaining-seconds) 60))))
      "No active pomo"))

#+end_src

Now we can run =emacsclient -e '(ruborcalor/org-pomodoro-time)'= from the terminal and get the remaining time on the org-pomodoro timer. 

To connect it to polybar, create the following shell script:

#+begin_src sh
#!/bin/sh

underline_color="%{u#99c2ff}%{+u}"
pomo_message=$(emacsclient -e '(ruborcalor/org-pomodoro-time)' | cut -d '"' -f 2)
echo ${underline_color}${pomo_message}
#+end_src

and then add it to your polybar config (remember to include =pomodoro= in your polybar modules):

#+begin_src 
[module/pomodoro]
type = custom/script
exec = ~/.local/bin/scripts/pomodoro-bar.sh
interval = 5
#+end_src

*** Conclusion

I hope this helps you get up and running with org-pomodoro. Let me know if you come across any further customization improvements!
** DONE 2020 Year In Review. Thinking Towards 2021         :@Retrospectives:
CLOSED: [2020-12-29 Tue 00:41]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 2020-review
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-12-28 Mon 23:41]--[2020-12-29 Tue 00:49] =>  1:08
CLOCK: [2020-12-28 Mon 23:15]--[2020-12-28 Mon 23:41] =>  0:26
CLOCK: [2020-12-28 Mon 11:32]--[2020-12-28 Mon 12:30] =>  0:58
CLOCK: [2020-12-28 Mon 09:00]--[2020-12-28 Mon 10:01] =>  1:01
CLOCK: [2020-12-27 Sun 22:12]--[2020-12-27 Sun 22:21] =>  0:09
CLOCK: [2020-12-27 Sun 19:46]--[2020-12-27 Sun 20:22] =>  0:36
CLOCK: [2020-12-27 Sun 19:14]--[2020-12-27 Sun 19:17] =>  0:03
CLOCK: [2020-12-27 Sun 18:32]--[2020-12-27 Sun 19:13] =>  0:41
CLOCK: [2020-12-23 Wed 19:11]--[2020-12-23 Wed 19:18] =>  0:07
CLOCK: [2020-12-23 Wed 18:25]--[2020-12-23 Wed 19:11] =>  0:46
CLOCK: [2020-12-23 Wed 18:19]--[2020-12-23 Wed 18:25] =>  0:06
:END:

This is the first time I write an end of year review post. I used [[https://www.preetamnath.com/blog/2020-year-in-review][Prateem's]] as a model when writing it. The point of this post is to reflect on what happened this year, think about what could have gone better, and ensure that the important aspects of life are given the right priority, time, and effort. I'm publishing it in part in the hopes that a reader will find the information valuable, and in part for accountability. The new year doesn't make this a better time to reflect than any other, but I figured I would take the opportunity during winter break.


*** What Made 2020 Great

A lot happened this year!

**** Projects
- Took [[../a-technical-overview-of-artifai][Artifai]] from idea to first customer
- Put [[../libravos-post-mortem][Libravos]] on Hold

**** Activities
- [[../summer-2020-internship-at-harvard-high-performance-computing/][Internship]] at Harvard High Performance Computing
- Joined McGill NeuroTech
- Participated in the McGill Dobson Cup
- Completed the McGill Effective Altruism Fellowship
- Presented at McGill Science and Synergy
- Attended a couple Hackathons

**** Physical
- Hiked 100 miles on a 1 week backpacking trip
- Learned to do 150 soccer juggles in a row
- Got better at kite surfing
- [[../on-veganism][Went Vegan]] and improved cooking skills

**** Productivity
- Switched from Vim to Spacemacs and discovered org-mode
- Started using Anki

**** Learning
- Developed fullstack skills
- Developed algorithms and data structures skills
- Went to school ([[https://colekillian.com/coursework-overview][coursework]])
  
*** What Could Have Been Better In 2020 

The main mistakes that contributed to the things that could have been better are:
- lack of discipline
- taking on too many other responsibilities that I shouldn't have prioritized as highly

**** Writing Consistency

Sometimes I would go months without blogging. I told myself that it was because I didn't have time, but in reality it's because I wasn't making it a priority above other things like school work.

**** Reading Consistency

I read lots and lots of blog posts and documentation, but few books. I've found it really important to always have a book that you are reading, so that during downtime you can default to reading that book rather than hackernews or facebook. I have a list of books I'm excited to read, but I didn't make it happen.

**** Exercising Consistency

I didn't make as much progress on becoming a gym shark athlete as I might have liked :). With covid I started doing at home workouts, but I wasn't able to stick to a strict routine for long periods of time. I was almost there.

**** Progress with Marketing

I like to think that reason Artifai is still in the red is not because of the quality of the website, but because of my lack or marketing skills. The reason for my lack of skills is the same for any other lack of skill; I didn't deciate enough smart time to it.

*** What I Look Forward To In 2021

My plan for accomplishing the below is to practice more discipline, and to take a lighter courseload at school.

**** COMMENT Meta
Below are a set of goals shaped as processes. I look forward to the journey taken for each of these goals in 2021.

When you think of a whole year ahead, think in terms of:
- defining your high-level goals (where you are headed)
- defining the purpose of the goal (which serves as motivation when things aren’t great)
- setting directional checkpoints (which tell you that you’re headed in the right direction)

Set plans in terms of quarters.

Focus on the inputs rather than the outputs. The idea is if you pick the right inputs to focus on, the outputs will take care of themselves.

Following the rules laid out in "The Way To Willpower", I need to carefuly assess the costs associated with each resolution. In the case of each of the below, it is a time commitment, that I won't be able to commit to other things like social events or relationships or school. I value these resolutions above social events or relationships or... I was going to write school but find it difficult. I like to think that if I sacrifice social events and relationships, I will be able to perform well in school and fulfill the below resolutions.

**** Growing This Website

I'd like 2021 to be the year where consistently write 4 posts per month. Writing is something I get excited about. This isn't the first time I've told myself I would write one post per week, but this will be the time that I live up to the resolution. Once I develop consistency in my writing, I'd like to look to YouTube.

**** Learning From Books

There is so much to learn from books. But I can't learn from books if I don't read them. My goal is to read one book per month, so by the end of the year I will have read 12 books. Ideally this will mean 12 book notes as well.

**** Continuing the Quest to Becoming a Gymshark Athlete

My goal is to do 20 minutes of intense exercise everyday. If I want to do more on a given day, that is fine too. How hard can it be? It's great because it helps keep me in shape, and also primes me for the rest of a day.

**** Becoming a Decent Sales Guy

The best way to become good at something, is to do it. I will be doing it by trying to take Artifai to sustainability, the point where the revenue offsets the infrastructure costs (which are pretty high for Artifai, unfortunately). I know that with the right set of marketing actions, it is possible.

**** Becoming A Better Leader

Similarly to marketing, this comes with practice. I really want to be a good leader, but am not an especially good one. Like other things, this requires a time investment. This resolution will require getting further from my comfort zone than the others. It involves communicating with other people.

**** Becoming A Better Story Teller

Being a good story teller improves many aspects of life, so I'd like to become one. My plan is to read Storyworthy, and to practice. My plan is to record myself telling a story once a week on Mondays.

**** Improving as a Software Developer

Can't forget programming!

**** COMMENT Am I Listing Too Many Things?

Time calculation. Frame everything in terms of time per week.

Ideally everything I do should fit into one of these goals.

*** The Four Burners Theory

It can be helpful to reflect on where you fall in the [[https://jamesclear.com/four-burners-theory][four burners theory]]. I'm planning on making health and work priorities for the coming year. It makes me a bit uneasy that I don't know whether or not this will be a regret in the future, but I don't think it will.

*** COMMENT Goals For 2021
- publish one blog post a week :: 5 hours per week
- read one book a month :: 2 hours per week
- exercise 20 minutes everyday :: 2 hours per week
- improve marketing and take artifai to sustainability :: 5 hours per week
- improve leadership skills :: 5 hours per week
- improve story telling skills :: 2 hours per week
- become comfortable with being perceived as an "asshole" :: 2 hours per week
- improve competitive programming skills (less of a priority). Main reason I see this as appealing is because I think it's something I could get very good at. And it's enjoyable to be very good at something. Also it would help with interviews. But I won't be doing interviews for another 9 months.

*** COMMENT 5 Lessons

I'm not sure I like this format, because I compress what could be 5 posts into one.

**** Make Sleep A Priority

One big difference for me between 2020 and 2019, is I slept a lot more this past year.

Last year 
This past semester.

**** Just Do It

Say yes and make it happen.

**** Go On Walks After Meals
**** Start The Day With Exercise
**** Don't Rush Into Development. Make A Design, and Don't Do Premature Optimization.
**** Give The Benefit Of The Doubt
**** Get A Nice Chair

*** COMMENT What Made 2020 Great

**** Working on Artifai

I worked on [[https://artif.ai][Artifai]] on and off through out the year with some friends at McGill. We took it from idea to first customer! Users have now created 4000+ artifaications using the site. Unfortunately, we have a long way to go to get out of the red, with just 2 unknown customers.

Along the way I had to learn React, Material-UI, and GCP.

Overall it's been a blast and helped ground the year. Always something to be working on.

I practiced leadership skills.

**** McGill NeuroTech

Joined an awesome group of mcgill students working on building an EMGBoard. A "keyboard" that comes in the form of wristbands that let you type in the air. [[https://www.youtube.com/watch?v=6IJuLtj3400][This]] is the final video we submitted to the NeuroTechX competition (We got first place!). Met a ton of awesome people.

**** Internship at Harvard High Performance Computing

Over the summer I interned a Harvard HPC. I got to work on an awesome project scaling up the academic cluster for the incoming wave of virtual students. I got to learn a lot more about what goes into performance testing software. You can find my final presentation [[https://ruborcalor.github.io/Academic-Cluster-Presentation/][here]].

**** Writing on colekillian.com for 6,600 readers

I'm trying to get into writing consistently. The numbers for this year weren't especially inspiring (12,399 page views), but I'm looking forward to writing more consistently in 2021. It's a very enjoyable process.

**** Participating in the McGill Lean Startup Program and Dobson Cup

I took Libravos through the McGill Lean Startup Program dn Dobson Cup.

It's fun to see the business side of things. The McGill Lean Startup Program is a 5 week program where you meet with other early stage startups and mentors to develop you business and practicing pitching. Met a bunch of awesome people and had a great time. Public speaking is something that makes me more anxious than almost anything out, but I'd like to work on improving my relationship with it. I enjoy it a lot when I do a good job.

The Dobson Cup is a startup competition. We made it in, but didn't get past the first round. It was at this point that we put Libravos on Hold. But still a lot of fun to practice pitching.

**** McGill Effective Altruism Fellowship

Took place this past Fall. We would meet once a week after doing some prereadings and discuss topics related to effective altruism. Overall it was a nice sense of community during the fall, and helped me to learn more about effective altruism.

**** Presented at McGill Science and Synergy

After working on Epigenosys, I presented my work at McGill Science and Synergy. This was my first time getting the chance to share something I had been working on. Overall a really cool experience.

**** Physical Things

The backpacking trip was wicked. It's incredible what a new experience you can expose yourself to over the course of a week.

Over the summer my main way of getting of the house was to practice soccer juggling. I would practice for about 30 minutes a day and went from a PR of around 25 to 150.

Over the summer I went kiteboarding 3 or 4 times in MA. For the first time I am able to go upwind. Got to the point where I starting working on jumps which are a lot of fun.

At the start of this fall semester I went Vegan. I speak more on it here.

**** Productivity Things

Discovering org-mode changed my life for good, whether for better or worse. Many of my posts this past year were related to it. Now I'm at the point where I time track what I am working for 24/7. I can't see myself using any other todo tool. Anki was great well. I'm definitely not using it to it's fullest potential, but it was good to start using it and see its power.

**** Learning Things

In working on Artifai and NeuroTech I improved my fullstack skills. This fall I got into competitive programming a bit. On Kattis I now have 170 points. I'd like to make more time for competitive programming, but it was great to get introduced to it.

Then of course, there was school. I took 13 courses this past year and learned a lot.

*** COMMENT Where Do I Want To Be In 5 Years

This is a difficult question. It kinda related to the meaning of life, but it's not quite as difficult as that.

There are few different places I could see myself in 5 years:
- Working as a software developer
- In grad school for MD or PhD in CS
- Building my own startup

Things I would like to have accomplished in 5 years:
- become a decently sized blogger
- become a decently sized youtuber
- have made profitable side projects
- become a good story teller
- learned a planche

*** COMMENT The bare-minimum questions:
**** When have you felt proud of yourself in 2020? What were you doing?
- Backpacking trip
- 4th place competitive programming
- First customer Artifai
**** If you had to teach one thing you learnt this year (that would improve one’s quality of life) what would that be?
- Cold showers?
**** What kept you up at night with excitement this year? Was it worth it? Would you want to do more of it?
Dang trying to remember back is hard.
*** COMMENT Give-me-more questions:
**** How did you have fun differently in 2020?
- Backpacking Trip
- Kitesurfing
**** How did you suffer differently in 2020?
Pretty much all of my suffering was self inflicted:
- Cold showers
- Working out
- Middle splits
**** What people/kind of people did you spend less time with in 2020?
Covid made it harder to see people. Less time with Math kids.
**** What people/kind of people did you spend more time with in 2020?
Spent a lot of time with roomates. Spent a lot of time with Simon.
**** What did you feel guilty for in 2020?
Relationship with Megan. Not contacting family / friends enough.
**** What 3 people are you the most grateful to in 2020 and why? How can you thank them? How can you find more people like this in your life?
- Simon :: Main man.
- Prateek :: Great dude to build Artifai with.
- David :: Learn from a different perspective.
**** What have you learnt about the way that you deal with uncertainty in 2020?
Try to eliminate the uncertainty / work harder.
**** What new habits did you create in 2020? Which ones would you want to keep?
- Vegan
- Cold Showers
- At Home Workouts
- Flossing
- 
**** Did you feel you spent enough time with your family/significant other in 2020? How would you change this in 2021?
I didn't spend very much time, but I felt like I spent enough time. 
**** What things did you stop caring about in 2020?

**** What new thing did you spend a lot of money on in 2020?
Artifai advertising.
**** What new thing did you spend a lot of time on in 2020?
Artifai
**** What do you feel you’ve gotten a lot better at in 2020?
Fullstack Development.
**** What did you rediscover pleasure in in 2020?

**** When you felt at peace this year, what were you doing?
- Running
- Biking
- Walking
- Guitar
**** Which of last years goals did you not achieve? Why did you not achieve them? Will you carry them on to 2021 and if not why?
I didn't make goals last year.
**** How much closer are you to your “by this age” milestones (if you have any)? Do you find yourself caring less or more about these?
Don't have any "by this age" milestones.
**** At the end of next year, if you are drastically exceeding your expectations, what would you be doing?
Making money from an online business.
** DONE Libravos Post Mortem              :startup:libravos:@Retrospectives:
CLOSED: [2020-12-23 Wed 22:49]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: libravos-post-mortem
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-12-23 Wed 21:50]--[2020-12-23 Wed 22:49] =>  0:59
CLOCK: [2020-12-23 Wed 19:18]--[2020-12-23 Wed 20:06] =>  0:48
:END:

*** What Was Libravos?

Libra-vos stands for "Balance"-"You" in Latin. I cofounded it with a great friend [[http://prateek.humane.com][Teek]] during our first semester at McGill.

[[file:./libravos_logo.png]]

We had many pivots all focused around the idea of revolutionizing insurance by cutting out the middle man. This is similar to what [[https://www.lemonade.com/][Lemonade]] is doing for home insurance in the United States. Some of the pivot descriptions included:
- Phone insurance on your terms. Simple. Fast. Libravos
- Libravos is a non-profit, community-oriented, home insurance company for developing countries. By operating fully autonomously, users can pool their money without paying for the additional operating costs of the company.

We worked on Libravos throughout our first semester at McGill, and decided to "put it on hold" when we didn't pass one of the rounds of the Dobson Cup. It lived from September 2019 to January 2020.

*** Accomplishments

Here are some things we are proud of doing while working on Libravos.

**** Business Things
- Were accepted to the [[https://www.mcgill.ca/dobson/entrepreneurship-programs/mcgill-dobson-cup][Dobson Cup]], a "flagship startup competition brings emerging McGill entrepreneurs together to compete for over $200,000 in prize money".
- Participated in the [[https://www.mcgill.ca/dobson/entrepreneurship-programs/mcgill-lean-startup-program][Lean Startup Program]] where we met with other startups each week, practiced our pitches, developed our business models, and built our product.
- Met to discuss Libravos with an employee at Rogers.
- Presented our idea to one of the sponsers (Intact) at a hackathon.
- Used google survey's to guage interest.
- Participated in the [[https://www.boltbootcamps.com/][Bolt Pitching Contest]].
- Met with the [[http://www.compassclinic.org/][Compass Startup Legal Clinic]] to get legal info.
- Went to a [[https://www.facebook.com/FintechCadence/][FinTech Cadence]] networking event.
- Interviewed potential customers on the sidewalk about Libravos.

**** Product Things

Most of our time was focused on developing the business model and pitching, so we didn't get too far with the actual product.

- Built a [[https://devpost.com/software/libravos-mobile-app-with-chat-bot][mobile app chatbot]] that answers insurance questions using React-Native, AWS, and RASA.
- Built a landing page https://libravos.com.
- Setup a [[https://github.com/Libravos/receipt-parser][receipt parser]].

*** Lessons

**** Pursue a Project That You Can Bootstrap Yourself

A continual problem we ran were the large costs attached to entering the insurance market. In Canada, you need a minimum of 5 million dollars of capital to become a registered insurance broker...

How do you get around these types of problems when building a product? New insurance companies do form every year, but as college students without any real credibility, it was very difficult. 

Our options were to:
1. Build the product, put it into production without being a registered insurance broker, and generate some revenue. Then pitch.
   - We definitely considered this option, but it would have been illegal...
2. Build the product without putting it into production. Then pitch.
   - Then we would at least have the product to show investors, but it's hard to convince investors to invest in something with no revenue built by college students.
3. Don't build the product. Then pitch.
   - You would have to have a seriously strong pitch to pull this off. With this path you are getting the investor to invest in the idea and the founders, but there's not much reason for an investor to put faith in the founders because they haven't built anything.

We kept trying to push off this problem, but it always came back :)

**** Solve Your Own Problem

We weren't trying to solve our own problem. This was problematic because if we weren't going to use it, who would?

This lead to some insecurity about the idea and a lack of understanding of the potential customers. Solving your own problem seems like the most common piece of startup advice, but we weren't really able to internalize it until we saw it for ourselves.

I think the main reason we (and probably other people) fell into this trap is that we were building Libravos for the sake of making a startup rather than from our excitement to solve our own problem.

*** Conclusion

Overall, working on Libravos was an awesome experience. We learned a ton about pitching, business plans, the lean startup method, and customer validation. I'm looking forward to more adventures in the future!
** DONE Summer 2020 Internship at Harvard High Performance Computing :internship:locust:@Retrospectives:
CLOSED: [2020-12-05]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: summer-2020-internship-at-harvard-high-performance-computing
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-12-26 Sat 13:28]--[2020-12-26 Sat 13:37] =>  0:09
CLOCK: [2020-12-25 Fri 00:30]--[2020-12-25 Fri 00:40] =>  0:10
CLOCK: [2020-12-24 Thu 09:42]--[2020-12-24 Thu 10:38] =>  0:56
:END:

*** High Level Overview
I intered at Harvard HPC for 12 weeks (High Performance Computing) the summer of 2020.

Due to Covid, the internship was virtual. I was working from my families home in Cambridge, MA.

My work focused on improvements to the Harvard academic cluster. I was lucky to work alongside lots of awesome and brilliant colleagues. :)
*** What Did I Learn

**** Skills
- I learned a lot about performance testing software. Previously i've relied on services like Firebase Hosting which remove some responsibility for performance testing and coding scalability.
- I got very familiar with linux monitoring tools.
- I learned "locust", a python performance testing framework.

**** Lessons
- Make sure to design tests based on what information you are trying to learn from them.
- It's not always worth it to analyze the results of performance tests that assume a higher load than you would ever expect in practice.
- Watch out for threading problems in third party packages.

*** What Did I Get Done

The technical details of my work is pretty well summarized by [[https://ruborcalor.github.io/Academic-Cluster-Presentation/][this presentation]] I gave at the end of the internship (I didn't record it unfortunately).

Here is an overview of the things I was most proud of accomplishing:
- After using performance testing to identify bottlenecks in the user account creation pipeline backend, I was able to modify it and improve processing speed by 15 times (Python, Bash).
- I coded [[https://gist.github.com/Ruborcalor/86300f7f1a17f75c34b10b778c83962d][web server performance tests]] which exposed unexpectedly high load averages on web server hosts, and found a way to reduce that load by 70% (Locust).
- I built a [[https://github.com/Ruborcalor/hpc-status-app][dashboard]] that enables non technical users to understand the complex Harvard super computer status (React, Passenger).
- Shared my load testing script and findings with the OSC OnDemand community: [[https://discourse.osc.edu/t/load-testing-ood/986/6][post]].

*** COMMENT Memorable Events

**** Code Test Python Fail
Python dictionary syntax tripped me up.

**** Giving Tech Talk

**** Posting on Discourse

**** =event_mpm= threading issues

*** Thanks
This experience would not have been possible without the many awesome colleagues I got to work alongside.
- Special thanks Francesco for being such a great mentor this past summer and instilling me with a sense of confidence and responsibility. I wouldn't have grown and learned as much as I did without your constant feedback.
- Special thanks Raminder for having me back to intern this past summer and believing in me.

*** COMMENT Comments

Nobody is interested in this level of detail. I will link the final presentation for the people interested in the details. What is the point?
- To identify lessons
- To give a high level overview of what I was up to over the summer

Who wants to read this? I don't. It's more a personal reflection. This thought was prompted by the idea of putting this under the "stories" category. I shouldn't do this, because I'm not framing it as a story. I'll have to make another category for reflections/retrospectives.
** DONE Summer 2019 Internship at Harvard High Performance Computing :internship:@Retrospectives:
CLOSED: [2020-12-01]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: summer-2019-internship-at-harvard-high-performance-computing
:EXPORT_FILE_NAME: index
:END:

*** High Level Overview

I intered at Harvard HPC for 12 weeks (High Performance Computing) the summer of 2019.

I lived with my family and would bike to and from work (about 15 minutes) each day.

My work focused around improving support for tracking client storage allocations. I was lucky to work alongside lots of awesome and brilliant colleagues. :)

*** What Did I Learn

**** Skills
- I learned Django, MySQL, and Docker
- Learned about the all of the communication involved with designing the structure of a new database.

**** Lessons
- Don't iterate through designs by coding them; instead use a tool like Figma and then code it once you settle on a design.

*** What Did I Get Done

Here is an overview of the things I was most proud of accomplishing:
- Coded a dashboard that enables Harvard FASRC clients to view, request, or terminate their storage allocations.
- Built a storage request form that helps streamline the process by which clients acquire more storage.
- Designed a MySQL database for tracking storage allocations and storage transactions.

*** COMMENT Memorable Events

Hard to remember back over a year ago unfortunately.

**** Giving Final Presentation
**** Friday Happy Hour
**** Getting My Name on the Door :)
**** Meeting with Aaron the django pro and discussing i3 vs dwm.
**** Watching volleyball and doing pushups during lunch.
**** So many friendly faces
**** Departing lunch at felipes

*** Thanks

This experience would not have been possible without the many awesome colleagues I got to work alongside. Special thanks to Raminder for being such a great mentor this past summer. This was my first software engineering internship; I wouldn't have grown and learned as much as I did without your constant feedback.
** DONE On Veganism                                     :veganism:@Thoughts:
CLOSED: [2020-12-28 Mon 12:06]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: on-veganism
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-12-28 Mon 10:56]--[2020-12-28 Mon 11:32] =>  0:36
:END:

*** Overview 
After being vegetarian for about a year, I went vegan in the Fall of 2020. A friend challenged me to do it for 2 weeks, and then I never stopped. It's been great. I'll come back and elaborate more on my thinking and experiences, but for now here are some of my favorite resources relating to veganism:
- [[https://zenhabits.net/vegan/][A Call for Compassion for the Defenseless]]
- [[https://zenhabits.net/vegan-guide/][A Loving Guide to Going Vegan]]
- [[https://www.utilitarian.net/singer/by/1979----.htm][Peter Singer, "Equality for Animals?"]]
** DONE A Technical Overview of Artifai              :artifai:@Software_Dev:
CLOSED: [2020-12-28 Mon 12:06]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: a-technical-overview-of-artifai
:EXPORT_FILE_NAME: index
:END:

*** Overview

The goal of Artifai is to help people generate art from photos. I had a problem: My walls were bare. I wanted to decorate them with memories, but I wanted the decorations to be artistic at the same time.

This lead me to discover neural-style, an algorithm that takes two images as input, and copies the style from one onto the other while retaining its content. Neural-style lets you take a meaningful photo and turn it into awesome art! There were several implementations available on Github, but I didn't see a way for non-technical users to easily use it and have the result shipped to their home. And so I began building Artifai with a group of friends; We are a group of university students and this was our first fullstack app! You can visit the website at [[https://artif.ai][https://artif.ai]].

*** Specifications

There is a lot of functionality required from such a webapp:
- An intuitive user interface
- A database for keeping track of a user's artifaications and orders
- Authentication for enabling user identification
- A pipeline for running GPU intensive jobs
- On Demand canvas printing
- Payment processing

*** Implementation Details

**** User Interface

We built the user interface using a combination of Webflow and React. Webflow is used solely for the landing page, and the rest is done with React and Material-UI. The sections of the website:
- Landing page :: Users can learn about the general idea of neural-style
- Create page :: Users upload a content, select a style, and press "Artifai" to generate an artifaication (refers to the art they made). Users can select a style from the popular styles or upload their own.
- Explore page :: A feed of the most recent public artifaications
- Artifaication page :: Users can link to this page to share their artifaications with others
- Product page :: Displays the mockup of an artifaication on a canvas and gives the user the option to purchase it.
- Profile page :: Displays a users own artifaications. User can toggle post options like "public" vs "private".

**** Database

We used Google Firestore for the database. It's here that we store a user's artifaications, orders, and styles. We build the "Explore" feed by taking the most recent "public" artifaications.

When starting out we didn't really understand Google Firebase, and made the silly mistake of trying to combine it with a GraphQL backend. Firestore has security rules that makes this completely unnecessary. After we realized this we corrected course :) 

**** Authentication

We used Google Firebase for dealing with Authentication. It made the process way easier. With a few lines of code we offer:
- Sign in with Google
- Sign in with Facebook
- Passwordless Email Signup

It was also critical to have anonymous users which let's users get the full Artifai experience without even needing to create an account.

**** Artifaication Processing

This was a very challenging part of the project; The goal was to run GPU intensive jobs on Google Cloud Compute without keeping a GPU VM running 24/7 (GPU VM hours aren't cheap!). The difficulty is in starting gpu vms on demand without significantly increasing the time a user waits for their artifaication to complete.

We tried all kinds of things inlcluding gpu containers, knative, etc. In the end we were able to solve this problem with the following strategy: We built an image with all the dependencies for getting started on computing right away. When a user submits an artifaication, it adds it to a "queue" represented as a collection of documents in the database, and creates a gpu vm (up to a maximum of 5 running concurrently). The GPU vms pull artifaications from the queue one by one until there are none left, at which point they destroy themselves. Note that we built off of [[https://github.com/ProGamerGov/neural-style-pt][neural-style-pt]] for the neural-style algorithm which took care of the most of the difficulty associated with implementing neural-style.

#+html: {{< image src="./artifaication-processing-pipeline.png" caption="Artifaication Processing Pipeline">}}

**** On Demand Canvas Printing

For canvas printing we relied on Printify, a print on demand platform that makes it simple to fulfill and send your products to your customers. We use them for generating mockups of user artifaications, and for fulling orders. They don't handle payment processing, so we used Stripe for that.

*** Architecture Overview

#+html: {{< image src="./artifai-architecture-overview.png" caption="Artifai Architecture Overview">}}

*** Meta

We started working on Artifai in March 2020 and have been working on it on and off up to the present. We are a team of 5, with two main developers, two minor developers, and one social media manager.

The next steps are to continue to build out features and dig into marketing. So far we are still pretty far in the red with 2 unknown canvas purchasers.

Please let us know if you have any feedback or suggestions!
** DONE The Best Way To Make Quick Presentations :org_mode:presentations:@Productivity:
CLOSED: [2020-12-30 Wed 11:15]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: quick-presentations
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2020-12-30 Wed 10:11]--[2020-12-30 Wed 10:32] =>  0:21
CLOCK: [2020-12-30 Wed 09:06]--[2020-12-30 Wed 10:11] =>  1:05
:END:

*** Overview

There are three aspects to a slideshow presentation:
- the content
- the design
- the delivery

This post focuses on the content and design. Imagine yourself, looking to quickly prepare a slideshow, and opening up google slides or powerpoint. What you really bring to the table is the content, but along the way you have to deal with manually composing slides; moving the textbox a little to the right, changing the font, resizing images.

Would it be possible to write a program that lets you forget about design, focus on the content, and then have a polished presentation generated for you? You would need a way to communicate the content with the program, an outliner tool. hmm

It turns out that there is a great package that accomplishes exactly this! See [[https://github.com/yjwen/org-reveal][org-reveal]], a package that uses [[https://revealjs.com/][reveal.js]] to turn plain text org files into html slideshow presentations. You can include all the typical presentation things: images, code, tables, etc. See an example presentation [[https://revealjs.com/][here]].

*** Installation

In spacemacs =org-reveal= is easy to setup. You enable it using org variables as follows and set the =org-re-reveal-root= to where you installed =reveal.js= on your computer:
#+begin_src elisp
  (org :variables
       org-enable-reveal-js-support t
     )

  (setq org-re-reveal-root "file:///home/gautierk/.npm-global/lib/node_modules/reveal.js/")
#+end_src

*** Usage

To use org-reveal, outline your presentation in an org file. Use org metadata to set things like the title and author. When you're ready to export, run =org-export-dispatch= (=, e e= on spacemacs) and then type =v b= to export using reveal. You did it! For more options see the [[https://github.com/yjwen/org-reveal][org-reveal]] README. [[https://ruborcalor.github.io/Academic-Cluster-Presentation/][Here]] is an example presentation I made.

*** COMMENT Similar post
https://cestlaz.github.io/posts/using-emacs-50-presentations/

He does a good job.

First introduces the problem and then says how emacs solves the problem as opposed to introducing emacs as a solution without making it clear what problem is being solved.

Don't think there is anything I would add that cestlaz didn't already so I'm not sure if it's worth writing this post.

Do I want to talk about how to host on github pages? Not sure. I should write it down for myself though, and then might as wel publish.
* About
:PROPERTIES:
:EXPORT_HUGO_SECTION: _about
:EXPORT_HUGO_WEIGHT: auto
:END:
** TODO Site Map
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: site_map
:EXPORT_FILE_NAME: index
:END:

Categories for the site:
- Software_Dev :: Things related To software development.
- Productivity :: Productivity. Computer tweaks. 
- Thoughts :: For thoughts, quick and short.
- Stories :: For stories. Backpacking. Breaking into computer. Similar to thoughts, but story based.

Web Dev is chill. But what if I do something Computer workflow related that helps with web dev? Then put it in both categories. That's fine. Same with productivity.

So "To Take Notes or Not to Take Notes, That is the Question" would go in "Thoughts" and "Productivity".

Need to improve categories.

Web Dev is easy. Everything that aids goes there.

Productivity should follow the same route. Everything that aids productivity goes there.

What about Web Dev Productivity? Web Dev takes preference.

How to distinguish between long and short posts? Don't worry about it. There will be a separate projects section.
** TODO Habits / Rules
- No Phone In Bed or Bathroom
- Cold Showers
- Workout At Least Every Other Day
- Daily Recall
** TODO Colophon
:LOGBOOK:
CLOCK: [2020-12-23 Wed 17:39]--[2020-12-23 Wed 18:19] =>  0:40
CLOCK: [2020-12-23 Wed 17:05]--[2020-12-23 Wed 17:08] =>  0:03
CLOCK: [2020-12-23 Wed 16:23]--[2020-12-23 Wed 17:05] =>  0:42
CLOCK: [2020-12-23 Wed 13:17]--[2020-12-23 Wed 13:41] =>  0:24
:END:

Here I describe my blogging workflow / setup.

- I use hugo for building the website. I use the "Love It" theme with some modifications.
- When I think of a post idea, I capture it with org-capture.
- I write my posts in org-mode and export them using ox-hugo
- When taking notes in general I'll save them to org-roam. Then i'll copy snippets over to the post I am writing.


Ideal workflow:
- get an idea for a blog post. org-capture to blog/posts
- mark some posts as "next", assign deadlines.

Types of posts:
- Stuff where I have everything and just need to publish
  these skip org roam and go straight to the website
- Stuff where I need to do the writing.
  these can start in org-roam.

Post categories:
- productivity
- stories
- software development
- thoughts / backyard-philosophy

These would all be nice to have in org-roam. The only problem is clocking into tasks? Yes you can clock into org-roam. So now I'm leaning towards doing everything in org-roam. This reduces duplication, adds all posts to org-roam. Supports backlinks. Oh yeah how do I add TODO to the agenda? I can have a specific view for parsing TODO from org-roam directory. Which will all be blog posts. How do I capture a blog idea? I make an org-roam file with a TODO.

When converting org-roam to polished, I can leave unpolished stuff in a comment.

Things to setup:
- parsing from org-roam directory

Posts are a polished subset of org-roam.

Let's think about the ideal.

Criteria:
- don't duplicate
- add posts to org-roam
- support backlinks
- quickly capture blog ideas
- time track how long is spent on a post

Revised criteria:
- 

What would backlinks in hugo mean? It would mean:
- a list of the posts that link to the post

Is this useful to me? not really. I don't link from one article to another very often. If I want this functionality I could get it later. But then I would need linking indication. You could either manually parse, or make a list of links in one place.

Backlinks could be overwhelming.

Questions for myself:
- Do I want to mix org-roam with posts?
  org-roam is more for personal notes. posts are more polished and sometimes come from org-roam, but this means duplication.
- Why do I want posts in org-roam?
  Because it's cool to have more posts in org-roam.

Decision. Keep posts and org-roam separate. org-roam is a wiki, posts are what I post.

Examples to think about:
- firebase parallel
  Something that's helpful to put in wiki, but I also want to post about.
- org pomodoro
  Something that's helpful to put in the wiki, but I also want to post about.  

But what about duplicating in the wiki for something that is a post and the research behind it?

Is there anything that won't be helpful in the wiki? No. So then you want everything in the wiki?

Everything in org-roam:
Pros:
- everything in it's own post isolation. Not much benefit here
- Can use org-roam back links
- Everything is in org-roam
Cons:
- harder to visualize the site map
- can't use hierarchy features

What is the point of org-roam? To keep a wiki for myself and others to reference. wiki's are research, posts are "polished" posts.

Can you clock into org-roam posts? Yeah but then you would have to parse all of org-roam when getting agenda. I don't want to do that.

Okay so conclusion is:
- stay the same way
 
Doesn't look like it will be possible to build org-agenda from org-roam. So TODO can't go in org-roam. This definitely affects plan.

So then I would have an org file for tracking the time spent on a post, but actually write the posts in org-roam. But then what is the advantage of this over writing the posts in the org agenda file? No real benefit. Except that I can have the "peace of mind" of keeping everything together in org-roam. But I could just copy things over if I want to.

Okay so then we are back at square one. Keep them separate. Use org-roam for research. Write posts in ox-hugo. Some potential duplication. And posts won't be a part of the of the org-roam graph. This is unfortunate. Is there a way to get the best of both worlds? Really the only thing I care about is the graph at the end.

Is there anything broken with the way I have it right now? No. So I'm going to leave it the way it is. Migration to another system later on probably wouldn't take too long.

In conclusion, would it be nice to have all the posts in org-roam? Yes. Is it worth it right now? Maybe. But it would take a bit of time to setup. I have other things to do. I can come back to it another time.
** TODO Why Blog
:LOGBOOK:
CLOCK: [2020-12-26 Sat 13:18]--[2020-12-26 Sat 13:28] =>  0:10
CLOCK: [2020-12-26 Sat 12:53]--[2020-12-26 Sat 13:18] =>  0:25
:END:

*** Overview
Even if nobody reads them, you should write them. It's become pretty clear to me that blogging is a source of both innovation and clarity. I have many of my best ideas and insights while blogging. Struggling to express things that you're thinking or feeling helps you understand them better. 
 
Because it really helps you to write regularly, and forces you to think in different ways, when you have an audience. Even if the audience is small. It’s scary, I know, but just do it. You’ll grow comfortable with it over time, and you should never let fear stop you from doing something amazing.

*** List Of Reasons To Blog

1. You’ll become a better writer. At its core, writing is communication. It is about recording thoughts on paper and compelling others to agree with them. To that end, writing (just like every other form of communication that has ever existed) improves with practice. Blogging will not force you to become a better writer, it’ll just happen as you do it. And becoming a better writer holds important benefits for the rest of your life—whether you are creating a book, a presentation, a résumé, or an anniversary card for your spouse.

2. You’ll become a better thinker. Because the process of writing includes recording thoughts on paper, the blogging process encourages you to stop and think deeper. You will delve deeper into the matters of your life and the worldview that shapes them. Unfortunately, at this point, many will choose not to blog (or write at all) based on the faulty reasoning that they “have nothing to say.” But to that line of thinking I always respond the same way, maybe you just haven’t discovered yet what you have to say.

3. You’ll live a more intentional life. Once you start writing about your life and the thoughts that shape it, you’ll begin thinking more intentionally about who you are, who you are becoming, and whether you like what you see or not. And that just may be reason enough to get started.

4. You’ll meet new people. Whether it be through comments, e-mails, or social media, you may be surprised at how quickly you meet people on-line. And by meet people, I mean legitimately form relationships that seek to serve one another. The blogging community is friendly, encouraging, and genuinely cheering for you to succeed—the only thing missing is you.

5. You’ll make some money. You don’t need to make money to enjoy blogging. In fact, sometimes making money from your blog can actually start to distract you from the joy that you found in the first place. That being said, whether you make $20/year or $20,000/year, it’s still pretty nice to have a hobby that actually pays you back.

6. You’ll inspire others. Blogging not only changes your life, it also changes the life of the reader. And because blogs are free for the audience and open to the public, on many levels, it is an act of giving. It is a selfless act of service to invest your time, energy, and worldview into a piece of writing and then offer it free to anybody who wants to read it. Others will find inspiration in your writing… and that’s a wonderful feeling.

7. It’ll serve as a personal journal. Blogging serves many of the same roles as keeping a journal. It trains us to be observant and gives weight to the personal growth that we are experiencing. It trains our minds to track life and articulate the changes we are experiencing. Your blog becomes a digital record of your life that is saved “in the cloud.” As a result, it can never be lost, stolen, or destroyed in a fire.

8. You’ll become more confident. Blogging will help you discover more confidence in your life. You will quickly realize that you do live an important life with a unique view and have something to offer others.

9. Build an audience.

*** Blogging Categories on This Website
- Productivity :: Here I write about how I am productive. Share productivity tips with others.
- Software-Dev :: Here I write about things I know related to software development. Share software-dev tips with others.
- Thoughts :: Share thoughts with others. Mainly personal reflections that I think other people might find applicable / relevant to their own lives. 
- Stories :: Share stories with others. Become a better story teller. Other people might find the stories entertaining / interesting.
- Retrospectives :: It's good for me to do them to help internalize lessons. Share them with others so that they can learn those lessons as well. And to inspire others.

*** Thoughts

Productivity and software dev, there is some pretty obvious value to the post in that it helps inform other people on a subject. Same with thoughts.

Stories is more about entertaining other people. Might be seen as showing off though.

Retrospectives is more about giving people an inside look into what it might be to be like me. Michael lynch retrospectives come to mind. I like reading them because I get to understand a little better what it would be like to live like him; working on personal projects. I find them inspiring. Get to see what is going on behind the scenes. Why is that appealing? Because helps show you what it takes.

So for Harvard post, gives some insight into what it would be like to work as intern. Great.

What makes stories different from retrospectives. Stories are more personal. Entertaining. Retrospectives can be entertaining, but are more focused on learning.

Retrospectives vs projects post? Projects page can probably link to retrospective post on the project.

Although potential the project post will be more technical than the retrospective post. I'll think about this more later.

*** List of other similar posts 
- https://sites.google.com/site/steveyegge2/you-should-write-blogs
- https://zenhabits.net/write-daily/
- https://www.becomingminimalist.com/how-to-start-a-blog/
** Elaborate on Computer Configuration
I use Manjaro i3.

Emacs for development and organization.
- org-super-agenda
- org-roam
- org-noter
- org-reveal
- evil-org
- org-gcal

Keepmenu
Firefox
St

** DONE What I'm Doing Now
CLOSED: [2020-12-02 Wed 09:47]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: now
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :narrow true
:END:

(This is a [[https://nownownow.com/about][now]] page. If you have your own site, [[https://nownownow.com/about][consider making one too!]])


*** Artifai

I'm leading the development of Artifai. Our goal is to making neural style technology available to non technical users, while streamlining the process for users to purchase their art on a poster/canvas. You can check it out at [[https://artif.ai][https://artif.ai]].

*** McGill

I'm a U2 honors math and computer science at McGill. My list of coursework is [[https://colekillian.com/coursework-overview/][here]].

*** Skills In Progress
(inspired by [[https://jamesbvaughan.com/skills-in-progress/][james vaughan]])

One thing that helps me stay happier and more energized is to always be working on developing a skill. As Willy Wonka says, we have "so much time and so little to do".

**** Current
These are skills that I'm currently working on.

- Fullstack Development
- Competitive Programming
- Acoustic Guitar and Singing
- Writing
- 1 Minute Handstand
- Leadership
- Storytelling
- Middle Splits

**** Backlog
These are skills that I'm excited to work on, but that I'm not making time for just yet.

- Electric Guitar
- Solve a Rubik's Cube Blindfolded
- YouTube channel
- Straddle Planche
- Reinforcement Learning
- Marathon
  
**** Back-Backlog
These are skills that I hope to get to eventually, but it could be a while.

- Paint
- Piano
- Biology
- 30 Day Fast

**** Past
These are skills I have developed in the past.

- Standing Backflip
- Basketball Finger Spin
- 150 Soccer Juggles
- Unicycle
- Magic Card Tricks
- Bike Wheelie
  
** DONE About
CLOSED: [2020-12-02 Wed 09:47]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: about
:EXPORT_FILE_NAME: index
:END:

<img src='/images/cole.jpg' title="Cole Killian" style="float: right; border-radius: 50%" width="200px"/>

Hello there! My name is Cole. Currently a U2 Math
<br>
and Computer Science student at McGill.

Excited about the future. I try to spend my free time hiking, <br>
playing guitar, building side projects, reading, writing, <br> and seeing friends. Here's what I'm working on [[/now][now]].

I'd love if you clicked [[mailto:cole@colekillian.com][here]] to let me know what brings <br> you here or if you want grab coffee.

*** Tech
- My daily driver is a ThinkPad T450.
- I run [[https://manjaro.org/][Manjaro]] [[https://i3wm.org/][i3]] ([[https://github.com/Ruborcalor/voidrice][dotfiles]]).
- I live by [[https://www.spacemacs.org/][Spacemacs]] [[https://orgmode.org/][org-mode]].
- I use [[https://apps.ankiweb.net/][Anki]] for things I don't want to forget.
- [[https://www.thunderbird.net/en-US/][Thunderbird]] with [[https://github.com/wshanks/tbkeys][tbkeys]] for checking mail.
  
*** People
I've learned a lot from a ton of cool and inspiring people. I might not recall all of them but here are some:
- [[http://paulgraham.com/][Paul Graham]]
- [[https://www.nateliason.com][Nat Eliason]]
- [[https://jamesbvaughan.com/][James Vaughan]]
- [[https://aliabdaal.com/][Ali Abdaal]]
- [[https://vasilishynkarenka.com/][Vasili Shynkarenka]]
- [[https://mtlynch.io/][Michael Lynch]]
- [[https://web.evanchen.cc/][Evan Chen]]

* Projects
:PROPERTIES:
:EXPORT_HUGO_SECTION: projects
:EXPORT_HUGO_WEIGHT: auto
:END:
** Artifai
** Age Prediction Via Methylation Data
** Libravos
** McGill OneCard Scraper
** Aspine

* Footnotes
* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
